{"ast":null,"code":"import * as i1 from '@abp/ng.core';\nimport { ListService, ConfigStateService, RouterOutletComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';\nimport * as i2 from '@abp/ng.theme.shared';\nimport { Confirmation, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport * as i5 from '@abp/ng.theme.shared/extensions';\nimport { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, UiExtensionsModule } from '@abp/ng.theme.shared/extensions';\nimport * as i0 from '@angular/core';\nimport { Component, InjectionToken, Injectable, NgModule } from '@angular/core';\nimport { finalize, map, tap, mapTo } from 'rxjs/operators';\nimport * as i3 from '@abp/ng.tenant-management/proxy';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i6 from '@abp/ng.feature-management';\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\nimport * as i7 from '@ngx-validate/core';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport * as i1$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\n\nfunction TenantsComponent_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, (ctx_r1.selected == null ? null : ctx_r1.selected.id) ? \"AbpTenantManagement::Edit\" : \"AbpTenantManagement::NewTenant\"), \" \");\n  }\n}\n\nfunction TenantsComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 17);\n    i0.ɵɵlistener(\"ngSubmit\", function TenantsComponent_ng_template_18_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.save();\n    });\n    i0.ɵɵelement(1, \"abp-extensible-form\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r3.tenantForm)(\"validateOnSubmit\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"selectedRecord\", ctx_r3.selected);\n  }\n}\n\nfunction TenantsComponent_ng_template_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"abp-button\", 20);\n    i0.ɵɵlistener(\"click\", function TenantsComponent_ng_template_20_Template_abp_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.save();\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 3, \"AbpTenantManagement::Cancel\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r5.tenantForm == null ? null : ctx_r5.tenantForm.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 5, \"AbpTenantManagement::Save\"));\n  }\n}\n\nfunction TenantsComponent_abp_feature_management_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"abp-feature-management\", 21);\n    i0.ɵɵlistener(\"visibleChange\", function TenantsComponent_abp_feature_management_22_Template_abp_feature_management_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.visibleFeatures = $event;\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"visible\", ctx_r6.visibleFeatures)(\"providerKey\", ctx_r6.providerKey);\n  }\n}\n\nconst _c0 = function () {\n  return [];\n};\n\nconst _c1 = function () {\n  return {\n    value: \"T\"\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    value: a0\n  };\n};\n\nconst _c3 = function (a0) {\n  return {\n    value: a0,\n    twoWay: true\n  };\n};\n\nconst _c4 = function (a0, a1, a2) {\n  return {\n    providerName: a0,\n    providerKey: a1,\n    visible: a2\n  };\n};\n\nconst _c5 = function (a0) {\n  return {\n    visibleChange: a0\n  };\n};\n\nconst _c6 = function (a0, a1, a2) {\n  return {\n    inputs: a0,\n    outputs: a1,\n    componentKey: a2\n  };\n};\n\nlet TenantsComponent = /*#__PURE__*/(() => {\n  class TenantsComponent {\n    constructor(list, injector, confirmationService, service, toasterService, fb) {\n      this.list = list;\n      this.injector = injector;\n      this.confirmationService = confirmationService;\n      this.service = service;\n      this.toasterService = toasterService;\n      this.fb = fb;\n      this.data = {\n        items: [],\n        totalCount: 0\n      };\n      this.visibleFeatures = false;\n      this.modalBusy = false;\n      this.featureManagementKey = \"FeatureManagement.FeatureManagementComponent\"\n      /* FeatureManagement */\n      ;\n\n      this.onVisibleFeaturesChange = value => {\n        this.visibleFeatures = value;\n      };\n    }\n\n    get hasSelectedTenant() {\n      return Boolean(this.selected.id);\n    }\n\n    ngOnInit() {\n      this.hookToQuery();\n    }\n\n    createTenantForm() {\n      const data = new FormPropData(this.injector, this.selected);\n      this.tenantForm = generateFormFromProps(data);\n    }\n\n    addTenant() {\n      this.selected = {};\n      this.createTenantForm();\n      this.isModalVisible = true;\n    }\n\n    editTenant(id) {\n      this.service.get(id).subscribe(res => {\n        this.selected = res;\n        this.createTenantForm();\n        this.isModalVisible = true;\n      });\n    }\n\n    save() {\n      if (!this.tenantForm.valid || this.modalBusy) return;\n      this.modalBusy = true;\n      const {\n        id\n      } = this.selected;\n      (id ? this.service.update(id, Object.assign(Object.assign({}, this.selected), this.tenantForm.value)) : this.service.create(this.tenantForm.value)).pipe(finalize(() => this.modalBusy = false)).subscribe(() => {\n        this.isModalVisible = false;\n        this.list.get();\n      });\n    }\n\n    delete(id, name) {\n      this.confirmationService.warn('AbpTenantManagement::TenantDeletionConfirmationMessage', 'AbpTenantManagement::AreYouSure', {\n        messageLocalizationParams: [name]\n      }).subscribe(status => {\n        if (status === Confirmation.Status.confirm) {\n          this.toasterService.success('AbpUi::SuccessfullyDeleted');\n          this.service.delete(id).subscribe(() => this.list.get());\n        }\n      });\n    }\n\n    hookToQuery() {\n      this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => {\n        this.data = res;\n      });\n    }\n\n    onSharedDatabaseChange(value) {\n      if (!value) {\n        setTimeout(() => {\n          const defaultConnectionString = document.getElementById('defaultConnectionString');\n\n          if (defaultConnectionString) {\n            defaultConnectionString.focus();\n          }\n        }, 0);\n      }\n    }\n\n    openFeaturesModal(providerKey) {\n      this.providerKey = providerKey;\n      setTimeout(() => {\n        this.visibleFeatures = true;\n      }, 0);\n    }\n\n    sort(data) {\n      const {\n        prop,\n        dir\n      } = data.sorts[0];\n      this.list.sortKey = prop;\n      this.list.sortOrder = dir;\n    }\n\n  }\n\n  TenantsComponent.ɵfac = function TenantsComponent_Factory(t) {\n    return new (t || TenantsComponent)(i0.ɵɵdirectiveInject(i1.ListService), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.TenantService), i0.ɵɵdirectiveInject(i2.ToasterService), i0.ɵɵdirectiveInject(i4.FormBuilder));\n  };\n\n  TenantsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TenantsComponent,\n    selectors: [[\"abp-tenants\"]],\n    features: [i0.ɵɵProvidersFeature([ListService, {\n      provide: EXTENSIONS_IDENTIFIER,\n      useValue: \"TenantManagement.TenantsComponent\"\n      /* Tenants */\n\n    }])],\n    decls: 23,\n    vars: 30,\n    consts: [[\"id\", \"wrapper\", 1, \"card\"], [1, \"card-header\"], [1, \"row\"], [1, \"col\", \"col-md-6\"], [1, \"card-title\"], [1, \"text-end\", \"col\", \"col-md-6\"], [3, \"record\"], [1, \"card-body\"], [\"id\", \"data-tables-table-filter\", 1, \"data-tables-filter\"], [1, \"input-group\"], [\"type\", \"search\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [3, \"data\", \"recordsTotal\", \"list\"], [3, \"visible\", \"busy\", \"visibleChange\"], [\"abpHeader\", \"\"], [\"abpBody\", \"\"], [\"abpFooter\", \"\"], [\"providerName\", \"T\", 3, \"visible\", \"providerKey\", \"visibleChange\", 4, \"abpReplaceableTemplate\"], [3, \"formGroup\", \"validateOnSubmit\", \"ngSubmit\"], [3, \"selectedRecord\"], [\"abpClose\", \"\", \"type\", \"button\", 1, \"btn\", \"btn-secondary\"], [\"iconClass\", \"fa fa-check\", 3, \"disabled\", \"click\"], [\"providerName\", \"T\", 3, \"visible\", \"providerKey\", \"visibleChange\"]],\n    template: function TenantsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h5\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"abpLocalization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelement(8, \"abp-page-toolbar\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵelementStart(12, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function TenantsComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.list.filter = $event;\n        });\n        i0.ɵɵpipe(13, \"abpLocalization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"abp-extensible-table\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"abp-modal\", 12);\n        i0.ɵɵlistener(\"visibleChange\", function TenantsComponent_Template_abp_modal_visibleChange_15_listener($event) {\n          return ctx.isModalVisible = $event;\n        });\n        i0.ɵɵtemplate(16, TenantsComponent_ng_template_16_Template, 3, 3, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(18, TenantsComponent_ng_template_18_Template, 2, 3, \"ng-template\", null, 14, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(20, TenantsComponent_ng_template_20_Template, 6, 7, \"ng-template\", null, 15, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, TenantsComponent_abp_feature_management_22_Template, 1, 2, \"abp-feature-management\", 16);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 10, \"AbpTenantManagement::Tenants\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"record\", ctx.data.items);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(13, 12, \"AbpUi::PagerSearch\"))(\"ngModel\", ctx.list.filter);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"data\", ctx.data.items || i0.ɵɵpureFunction0(14, _c0))(\"recordsTotal\", ctx.data.totalCount || 0)(\"list\", ctx.list);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"visible\", ctx.isModalVisible)(\"busy\", ctx.modalBusy);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"abpReplaceableTemplate\", i0.ɵɵpureFunction3(26, _c6, i0.ɵɵpureFunction3(20, _c4, i0.ɵɵpureFunction0(15, _c1), i0.ɵɵpureFunction1(16, _c2, ctx.providerKey), i0.ɵɵpureFunction1(18, _c3, ctx.visibleFeatures)), i0.ɵɵpureFunction1(24, _c5, ctx.onVisibleFeaturesChange), ctx.featureManagementKey));\n      }\n    },\n    directives: [i5.PageToolbarComponent, i5.ExtensibleTableComponent, i2.ModalComponent, i5.ExtensibleFormComponent, i2.ButtonComponent, i6.FeatureManagementComponent, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i1.FormSubmitDirective, i7.ValidationGroupDirective, i4.FormGroupDirective, i2.ModalCloseDirective, i1.ReplaceableTemplateDirective],\n    pipes: [i1.LocalizationPipe],\n    encapsulation: 2\n  });\n  return TenantsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DEFAULT_TENANTS_ENTITY_ACTIONS = EntityAction.createMany([{\n  text: 'AbpTenantManagement::Edit',\n  action: data => {\n    const component = data.getInjected(TenantsComponent);\n    component.editTenant(data.record.id);\n  },\n  permission: 'AbpTenantManagement.Tenants.Update'\n}, {\n  text: 'AbpTenantManagement::Permission:ManageFeatures',\n  action: data => {\n    const component = data.getInjected(TenantsComponent);\n    component.openFeaturesModal(data.record.id);\n  },\n  permission: 'AbpTenantManagement.Tenants.ManageFeatures'\n}, {\n  text: 'AbpTenantManagement::Delete',\n  action: data => {\n    const component = data.getInjected(TenantsComponent);\n    component.delete(data.record.id, data.record.name);\n  },\n  permission: 'AbpTenantManagement.Tenants.Delete'\n}]);\nconst DEFAULT_TENANTS_ENTITY_PROPS = EntityProp.createMany([{\n  type: \"string\"\n  /* String */\n  ,\n  name: 'name',\n  displayName: 'AbpTenantManagement::TenantName',\n  sortable: true\n}]);\nconst DEFAULT_TENANTS_CREATE_FORM_PROPS = FormProp.createMany([{\n  type: \"string\"\n  /* String */\n  ,\n  name: 'name',\n  id: 'name',\n  displayName: 'AbpTenantManagement::TenantName',\n  validators: () => [Validators.required, Validators.maxLength(256)]\n}, {\n  type: \"email\"\n  /* Email */\n  ,\n  name: 'adminEmailAddress',\n  displayName: 'AbpTenantManagement::DisplayName:AdminEmailAddress',\n  id: 'admin-email-address',\n  validators: () => [Validators.required, Validators.maxLength(256), Validators.email]\n}, {\n  type: \"password\"\n  /* Password */\n  ,\n  name: 'adminPassword',\n  displayName: 'AbpTenantManagement::DisplayName:AdminPassword',\n  id: 'admin-password',\n  autocomplete: 'new-password',\n  validators: data => [Validators.required, ...getPasswordValidators({\n    get: data.getInjected\n  })]\n}]);\nconst DEFAULT_TENANTS_EDIT_FORM_PROPS = DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(0, 1);\nconst DEFAULT_TENANTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([{\n  text: 'AbpTenantManagement::ManageHostFeatures',\n  action: data => {\n    const component = data.getInjected(TenantsComponent);\n    component.openFeaturesModal('');\n  },\n  permission: 'FeatureManagement.ManageHostFeatures',\n  icon: 'fa fa-cog'\n}, {\n  text: 'AbpTenantManagement::NewTenant',\n  action: data => {\n    const component = data.getInjected(TenantsComponent);\n    component.addTenant();\n  },\n  permission: 'AbpTenantManagement.Tenants.Create',\n  icon: 'fa fa-plus'\n}]);\nconst DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS = {\n  [\"TenantManagement.TenantsComponent\"\n  /* Tenants */\n  ]: DEFAULT_TENANTS_ENTITY_ACTIONS\n};\nconst DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS = {\n  [\"TenantManagement.TenantsComponent\"\n  /* Tenants */\n  ]: DEFAULT_TENANTS_TOOLBAR_ACTIONS\n};\nconst DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS = {\n  [\"TenantManagement.TenantsComponent\"\n  /* Tenants */\n  ]: DEFAULT_TENANTS_ENTITY_PROPS\n};\nconst DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS = {\n  [\"TenantManagement.TenantsComponent\"\n  /* Tenants */\n  ]: DEFAULT_TENANTS_CREATE_FORM_PROPS\n};\nconst DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS = {\n  [\"TenantManagement.TenantsComponent\"\n  /* Tenants */\n  ]: DEFAULT_TENANTS_EDIT_FORM_PROPS\n};\nconst TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');\nconst TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');\nconst TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');\nconst TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS');\nconst TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS');\nlet TenantManagementExtensionsGuard = /*#__PURE__*/(() => {\n  class TenantManagementExtensionsGuard {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    canActivate() {\n      const extensions = this.injector.get(ExtensionsService);\n      const actionContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n      const toolbarContributors = this.injector.get(TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n      const propContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};\n      const createFormContributors = this.injector.get(TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n      const editFormContributors = this.injector.get(TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n      const configState = this.injector.get(ConfigStateService);\n      return getObjectExtensionEntitiesFromStore(configState, 'TenantManagement').pipe(map(entities => ({\n        [\"TenantManagement.TenantsComponent\"\n        /* Tenants */\n        ]: entities.Tenant\n      })), mapEntitiesToContributors(configState, 'TenantManagement'), tap(objectExtensionContributors => {\n        mergeWithDefaultActions(extensions.entityActions, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, actionContributors);\n        mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);\n        mergeWithDefaultProps(extensions.entityProps, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n        mergeWithDefaultProps(extensions.createFormProps, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n        mergeWithDefaultProps(extensions.editFormProps, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n      }), mapTo(true));\n    }\n\n  }\n\n  TenantManagementExtensionsGuard.ɵfac = function TenantManagementExtensionsGuard_Factory(t) {\n    return new (t || TenantManagementExtensionsGuard)(i0.ɵɵinject(i0.Injector));\n  };\n\n  TenantManagementExtensionsGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantManagementExtensionsGuard,\n    factory: TenantManagementExtensionsGuard.ɵfac\n  });\n  return TenantManagementExtensionsGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst routes = [{\n  path: '',\n  redirectTo: 'tenants',\n  pathMatch: 'full'\n}, {\n  path: '',\n  component: RouterOutletComponent,\n  canActivate: [AuthGuard, PermissionGuard, TenantManagementExtensionsGuard],\n  children: [{\n    path: 'tenants',\n    component: ReplaceableRouteContainerComponent,\n    data: {\n      requiredPolicy: 'AbpTenantManagement.Tenants',\n      replaceableComponent: {\n        key: \"TenantManagement.TenantsComponent\"\n        /* Tenants */\n        ,\n        defaultComponent: TenantsComponent\n      }\n    }\n  }]\n}];\nlet TenantManagementRoutingModule = /*#__PURE__*/(() => {\n  class TenantManagementRoutingModule {}\n\n  TenantManagementRoutingModule.ɵfac = function TenantManagementRoutingModule_Factory(t) {\n    return new (t || TenantManagementRoutingModule)();\n  };\n\n  TenantManagementRoutingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TenantManagementRoutingModule\n  });\n  TenantManagementRoutingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[RouterModule.forChild(routes)], RouterModule]\n  });\n  return TenantManagementRoutingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TenantManagementModule = /*#__PURE__*/(() => {\n  class TenantManagementModule {\n    static forChild(options = {}) {\n      return {\n        ngModule: TenantManagementModule,\n        providers: [{\n          provide: TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,\n          useValue: options.entityActionContributors\n        }, {\n          provide: TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,\n          useValue: options.toolbarActionContributors\n        }, {\n          provide: TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,\n          useValue: options.entityPropContributors\n        }, {\n          provide: TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,\n          useValue: options.createFormPropContributors\n        }, {\n          provide: TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,\n          useValue: options.editFormPropContributors\n        }, TenantManagementExtensionsGuard]\n      };\n    }\n\n    static forLazy(options = {}) {\n      return new LazyModuleFactory(TenantManagementModule.forChild(options));\n    }\n\n  }\n\n  TenantManagementModule.ɵfac = function TenantManagementModule_Factory(t) {\n    return new (t || TenantManagementModule)();\n  };\n\n  TenantManagementModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TenantManagementModule\n  });\n  TenantManagementModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[TenantManagementRoutingModule, NgxValidateCoreModule, CoreModule, ThemeSharedModule, NgbDropdownModule, FeatureManagementModule, UiExtensionsModule]]\n  });\n  return TenantManagementModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, TenantManagementExtensionsGuard, TenantManagementModule, TenantsComponent }; //# sourceMappingURL=abp-ng.tenant-management.mjs.map","map":null,"metadata":{},"sourceType":"module"}