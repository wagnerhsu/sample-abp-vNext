{"ast":null,"code":"module.exports = clone;\n/*\n  Deep clones all properties except functions\n\n  var arr = [1, 2, 3];\n  var subObj = {aa: 1};\n  var obj = {a: 3, b: 5, c: arr, d: subObj};\n  var objClone = clone(obj);\n  arr.push(4);\n  subObj.bb = 2;\n  obj; // {a: 3, b: 5, c: [1, 2, 3, 4], d: {aa: 1}}\n  objClone; // {a: 3, b: 5, c: [1, 2, 3], d: {aa: 1, bb: 2}}\n*/\n\nfunction clone(obj) {\n  if (typeof obj == 'function') {\n    return obj;\n  }\n\n  var result = Array.isArray(obj) ? [] : {};\n\n  for (var key in obj) {\n    // include prototype properties\n    var value = obj[key];\n    var type = {}.toString.call(value).slice(8, -1);\n\n    if (type == 'Array' || type == 'Object') {\n      result[key] = clone(value);\n    } else if (type == 'Date') {\n      result[key] = new Date(value.getTime());\n    } else if (type == 'RegExp') {\n      result[key] = RegExp(value.source, getRegExpFlags(value));\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n}\n\nfunction getRegExpFlags(regExp) {\n  if (typeof regExp.source.flags == 'string') {\n    return regExp.source.flags;\n  } else {\n    var flags = [];\n    regExp.global && flags.push('g');\n    regExp.ignoreCase && flags.push('i');\n    regExp.multiline && flags.push('m');\n    regExp.sticky && flags.push('y');\n    regExp.unicode && flags.push('u');\n    return flags.join('');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}