{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { map, finalize } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport * as i2 from '@abp/ng.core';\nimport { __rest } from 'tslib';\nimport * as i1 from '@abp/ng.theme.shared';\nlet AuthWrapperService = /*#__PURE__*/(() => {\n  class AuthWrapperService {\n    constructor(multiTenancy, configState, injector) {\n      this.multiTenancy = multiTenancy;\n      this.configState = configState;\n      this.isMultiTenancyEnabled$ = this.configState.getDeep$('multiTenancy.isEnabled');\n      this.tenantBoxKey = 'Account.TenantBoxComponent';\n      this.route = injector.get(ActivatedRoute);\n    }\n\n    get enableLocalLogin$() {\n      return this.configState.getSetting$('Abp.Account.EnableLocalLogin').pipe(map(value => (value === null || value === void 0 ? void 0 : value.toLowerCase()) !== 'false'));\n    }\n\n    get isTenantBoxVisibleForCurrentRoute() {\n      var _a;\n\n      return (_a = this.getMostInnerChild().data.tenantBoxVisible) !== null && _a !== void 0 ? _a : true;\n    }\n\n    get isTenantBoxVisible() {\n      return this.isTenantBoxVisibleForCurrentRoute && this.multiTenancy.isTenantBoxVisible;\n    }\n\n    getMostInnerChild() {\n      let child = this.route.snapshot;\n      let depth = 0;\n      const depthLimit = 10;\n\n      while (child.firstChild && depth < depthLimit) {\n        child = child.firstChild;\n        depth++;\n      }\n\n      return child;\n    }\n\n  }\n\n  AuthWrapperService.ɵfac = function AuthWrapperService_Factory(t) {\n    return new (t || AuthWrapperService)(i0.ɵɵinject(i2.MultiTenancyService), i0.ɵɵinject(i2.ConfigStateService), i0.ɵɵinject(i0.Injector));\n  };\n\n  AuthWrapperService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthWrapperService,\n    factory: AuthWrapperService.ɵfac\n  });\n  return AuthWrapperService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TenantBoxService = /*#__PURE__*/(() => {\n  class TenantBoxService {\n    constructor(toasterService, tenantService, sessionState, configState) {\n      this.toasterService = toasterService;\n      this.tenantService = tenantService;\n      this.sessionState = sessionState;\n      this.configState = configState;\n      this.currentTenant$ = this.sessionState.getTenant$();\n    }\n\n    onSwitch() {\n      const tenant = this.sessionState.getTenant();\n      this.name = tenant === null || tenant === void 0 ? void 0 : tenant.name;\n      this.isModalVisible = true;\n    }\n\n    save() {\n      if (!this.name) {\n        this.setTenant(null);\n        this.isModalVisible = false;\n        return;\n      }\n\n      this.modalBusy = true;\n      this.tenantService.findTenantByName(this.name).pipe(finalize(() => this.modalBusy = false)).subscribe(_a => {\n        var {\n          success,\n          tenantId: id\n        } = _a,\n            tenant = __rest(_a, [\"success\", \"tenantId\"]);\n\n        if (!success) {\n          this.showError();\n          return;\n        }\n\n        this.setTenant(Object.assign(Object.assign({}, tenant), {\n          id,\n          isAvailable: true\n        }));\n        this.isModalVisible = false;\n      });\n    }\n\n    setTenant(tenant) {\n      this.sessionState.setTenant(tenant);\n      this.configState.refreshAppState();\n    }\n\n    showError() {\n      this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {\n        messageLocalizationParams: [this.name]\n      });\n    }\n\n  }\n\n  TenantBoxService.ɵfac = function TenantBoxService_Factory(t) {\n    return new (t || TenantBoxService)(i0.ɵɵinject(i1.ToasterService), i0.ɵɵinject(i2.AbpTenantService), i0.ɵɵinject(i2.SessionStateService), i0.ɵɵinject(i2.ConfigStateService));\n  };\n\n  TenantBoxService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantBoxService,\n    factory: TenantBoxService.ɵfac\n  });\n  return TenantBoxService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of account-core\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AuthWrapperService, TenantBoxService }; //# sourceMappingURL=abp-ng.account.core.mjs.map","map":null,"metadata":{},"sourceType":"module"}