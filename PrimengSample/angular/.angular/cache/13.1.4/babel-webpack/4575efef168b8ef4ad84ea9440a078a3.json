{"ast":null,"code":"import { InjectionToken, ElementRef, Directive, Injector, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewContainerRef, ContentChild, ChangeDetectorRef, Optional, Self, SkipSelf, TemplateRef, ComponentRef, ComponentFactoryResolver, Renderer2, NgModule } from '@angular/core';\nimport { Subject, merge, NEVER, ReplaySubject, Subscription } from 'rxjs';\nimport { takeUntil, mapTo, filter, tap, map } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { FormGroupName, FormGroupDirective, NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/constants/blueprints.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction ValidationErrorComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const error_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(error_r1.message);\n  }\n}\n\nconst BLUEPRINTS = {\n  email: 'Please enter a valid email address.',\n  max: 'Max. value should be {{ max }}. ({{ actual }} entered)',\n  maxlength: 'Max. {{ requiredLength }} characters are allowed. (has {{ actualLength }})',\n  min: 'Min. value should be {{ min }}. ({{ actual }} entered)',\n  minlength: 'Min. {{ requiredLength }} characters are required. (has {{ actualLength }})',\n  pattern: 'Invalid pattern. Please review your input.',\n  required: 'This field is required.',\n  passwordMismatch: 'Passwords do not match.',\n  invalidPassword: 'Password should include {{ description }}.'\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/constants/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/blueprints.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst VALIDATION_BLUEPRINTS = new InjectionToken('validation.blueprints');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/error-template.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst VALIDATION_ERROR_TEMPLATE = new InjectionToken('validation.error.template');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/invalid-classes.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst VALIDATION_INVALID_CLASSES = new InjectionToken('validation.invalid.classes');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/map-errors-fn.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst VALIDATION_MAP_ERRORS_FN = new InjectionToken('validation.map.errors.fn');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/target-selector.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst VALIDATION_TARGET_SELECTOR = new InjectionToken('validation.target.selector');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/validate-on-submit.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst VALIDATION_VALIDATE_ON_SUBMIT = new InjectionToken('validation.validate.on.submit');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/common.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} prop\n * @return {?}\n */\n\nfunction evalPropTruthy(prop) {\n  return prop || typeof prop === 'string';\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/string-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst CHARMAP = {\n  á: 'a',\n  Á: 'A',\n  À: 'A',\n  à: 'a',\n  Ă: 'A',\n  ă: 'a',\n  Ắ: 'A',\n  ắ: 'a',\n  ằ: 'a',\n  Ằ: 'A',\n  Ẵ: 'A',\n  ẵ: 'a',\n  ẳ: 'a',\n  Ẳ: 'A',\n  â: 'a',\n  Â: 'A',\n  ấ: 'a',\n  Ấ: 'A',\n  ầ: 'a',\n  Ầ: 'A',\n  ǎ: 'a',\n  Ǎ: 'A',\n  å: 'a',\n  Å: 'A',\n  Ǻ: 'A',\n  ǻ: 'a',\n  ä: 'a',\n  Ä: 'A',\n  a̋: 'a',\n  A̋: 'A',\n  Ã: 'A',\n  ã: 'a',\n  A̧: 'A',\n  a̧: 'a',\n  Ą: 'A',\n  ą: 'a',\n  ā: 'a',\n  Ā: 'A',\n  ȁ: 'a',\n  Ȁ: 'A',\n  ȃ: 'a',\n  Ȃ: 'A',\n  Ặ: 'A',\n  ặ: 'a',\n  æ: 'a',\n  Æ: 'A',\n  Ǽ: 'A',\n  ǽ: 'a',\n  b̌: 'b',\n  B̌: 'B',\n  b̧: 'b',\n  B̧: 'B',\n  ć: 'c',\n  Ć: 'C',\n  c̆: 'c',\n  C̆: 'C',\n  ĉ: 'c',\n  Ĉ: 'C',\n  č: 'c',\n  Č: 'C',\n  ċ: 'c',\n  Ċ: 'C',\n  Ç: 'C',\n  ç: 'c',\n  Ḉ: 'C',\n  ḉ: 'c',\n  č̣: 'c',\n  Č̣: 'C',\n  Ď: 'D',\n  ď: 'd',\n  ḑ: 'd',\n  Ḑ: 'D',\n  đ: 'd',\n  Đ: 'D',\n  Ð: 'D',\n  ð: 'd',\n  É: 'E',\n  é: 'e',\n  È: 'E',\n  è: 'e',\n  Ĕ: 'E',\n  ĕ: 'e',\n  ê: 'e',\n  Ê: 'E',\n  Ế: 'E',\n  ế: 'e',\n  ề: 'e',\n  Ề: 'E',\n  Ê̌: 'E',\n  ê̌: 'e',\n  Ě: 'E',\n  ě: 'e',\n  ë: 'e',\n  Ë: 'E',\n  e̋: 'e',\n  E̋: 'E',\n  Ė: 'E',\n  ė: 'e',\n  Ȩ: 'E',\n  ȩ: 'e',\n  ḝ: 'e',\n  Ḝ: 'E',\n  Ę: 'E',\n  ę: 'e',\n  Ē: 'E',\n  ē: 'e',\n  Ḗ: 'E',\n  ḗ: 'e',\n  Ḕ: 'E',\n  ḕ: 'e',\n  Ȅ: 'E',\n  ȅ: 'e',\n  Ȇ: 'E',\n  ȇ: 'e',\n  ɛ̧: 'e',\n  Ɛ̧: 'E',\n  f̌: 'f',\n  F̌: 'F',\n  ƒ: 'f',\n  ǵ: 'g',\n  Ǵ: 'G',\n  ğ: 'g',\n  Ğ: 'G',\n  Ĝ: 'G',\n  ĝ: 'g',\n  ǧ: 'g',\n  Ǧ: 'G',\n  Ġ: 'G',\n  ġ: 'g',\n  ģ: 'g',\n  Ģ: 'G',\n  Ĥ: 'H',\n  ĥ: 'h',\n  ȟ: 'h',\n  Ȟ: 'H',\n  ḩ: 'h',\n  Ḩ: 'H',\n  ħ: 'h',\n  Ħ: 'H',\n  ḫ: 'h',\n  Ḫ: 'H',\n  í: 'i',\n  Í: 'I',\n  Ì: 'I',\n  ì: 'i',\n  Ĭ: 'I',\n  ĭ: 'i',\n  Î: 'I',\n  î: 'i',\n  ǐ: 'i',\n  Ǐ: 'I',\n  ï: 'i',\n  Ï: 'I',\n  ḯ: 'i',\n  Ḯ: 'I',\n  I̋: 'I',\n  i̋: 'i',\n  ĩ: 'i',\n  Ĩ: 'I',\n  İ: 'I',\n  I̧: 'I',\n  i̧: 'i',\n  Į: 'I',\n  į: 'i',\n  ī: 'i',\n  Ī: 'I',\n  ȉ: 'i',\n  Ȉ: 'I',\n  ȋ: 'i',\n  Ȋ: 'I',\n  ĳ: 'i',\n  Ĳ: 'I',\n  ı: 'i',\n  Ɨ̧: 'I',\n  ɨ̧: 'i',\n  ĵ: 'j',\n  Ĵ: 'J',\n  ǰ: 'j',\n  J̌: 'J',\n  Ḱ: 'K',\n  ḱ: 'k',\n  k̆: 'k',\n  K̆: 'K',\n  ǩ: 'k',\n  Ǩ: 'K',\n  ķ: 'k',\n  Ķ: 'K',\n  Ĺ: 'L',\n  ĺ: 'l',\n  Ľ: 'L',\n  ľ: 'l',\n  ļ: 'l',\n  Ļ: 'L',\n  ł: 'l',\n  Ł: 'l',\n  Ŀ: 'L',\n  ŀ: 'l',\n  Ḿ: 'M',\n  ḿ: 'm',\n  m̆: 'm',\n  M̆: 'M',\n  m̌: 'm',\n  M̌: 'M',\n  M̧: 'M',\n  m̧: 'm',\n  Ń: 'N',\n  ń: 'n',\n  Ǹ: 'N',\n  ǹ: 'n',\n  n̆: 'n',\n  N̆: 'N',\n  Ň: 'N',\n  ň: 'n',\n  ñ: 'n',\n  Ñ: 'N',\n  Ņ: 'N',\n  ņ: 'n',\n  ó: 'o',\n  Ó: 'O',\n  Ò: 'O',\n  ò: 'o',\n  Ŏ: 'O',\n  ŏ: 'o',\n  Ô: 'O',\n  ô: 'o',\n  ố: 'o',\n  Ố: 'O',\n  ồ: 'o',\n  Ồ: 'O',\n  Ǒ: 'O',\n  ǒ: 'o',\n  Ö: 'O',\n  ö: 'o',\n  ő: 'o',\n  Ő: 'O',\n  Õ: 'O',\n  õ: 'o',\n  ṍ: 'o',\n  Ṍ: 'O',\n  Ø: 'O',\n  ø: 'o',\n  Ǿ: 'O',\n  ǿ: 'o',\n  o̧: 'o',\n  O̧: 'O',\n  Ō: 'O',\n  ō: 'o',\n  ṓ: 'o',\n  Ṓ: 'O',\n  ṑ: 'o',\n  Ṑ: 'O',\n  ȍ: 'o',\n  Ȍ: 'O',\n  ȏ: 'o',\n  Ȏ: 'O',\n  ơ: 'o',\n  Ơ: 'O',\n  œ: 'o',\n  Œ: 'O',\n  ṕ: 'p',\n  Ṕ: 'P',\n  p̆: 'p',\n  P̆: 'P',\n  P̌: 'P',\n  p̌: 'p',\n  Q̌: 'Q',\n  q̌: 'q',\n  Q̧: 'Q',\n  q̧: 'q',\n  ŕ: 'r',\n  Ŕ: 'R',\n  r̆: 'r',\n  R̆: 'R',\n  Ř: 'R',\n  ř: 'r',\n  ŗ: 'r',\n  Ŗ: 'R',\n  Ř̩: 'R',\n  ř̩: 'r',\n  ȑ: 'r',\n  Ȑ: 'R',\n  Ȓ: 'R',\n  ȓ: 'r',\n  Ś: 'S',\n  ś: 's',\n  Ṥ: 'S',\n  ṥ: 's',\n  Ŝ: 'S',\n  ŝ: 's',\n  š: 's',\n  Š: 'S',\n  Ṧ: 'S',\n  ṧ: 's',\n  ş: 's',\n  Ş: 'S',\n  ș: 's',\n  Ș: 'S',\n  ſ: 's',\n  T̆: 'T',\n  t̆: 't',\n  Ť: 'T',\n  ť: 't',\n  ţ: 't',\n  Ţ: 'T',\n  Ț: 'T',\n  ț: 't',\n  ŧ: 't',\n  Ŧ: 'T',\n  Ú: 'U',\n  ú: 'u',\n  ù: 'u',\n  Ù: 'U',\n  ŭ: 'u',\n  Ŭ: 'U',\n  Û: 'U',\n  û: 'u',\n  ǔ: 'u',\n  Ǔ: 'U',\n  Ů: 'U',\n  ů: 'u',\n  ü: 'u',\n  Ü: 'U',\n  ǘ: 'u',\n  Ǘ: 'U',\n  Ǜ: 'U',\n  ǜ: 'u',\n  ǚ: 'u',\n  Ǚ: 'U',\n  ǖ: 'u',\n  Ǖ: 'U',\n  Ű: 'U',\n  ű: 'u',\n  ũ: 'u',\n  Ũ: 'U',\n  Ṹ: 'U',\n  ṹ: 'u',\n  u̧: 'u',\n  U̧: 'U',\n  Ų: 'U',\n  ų: 'u',\n  Ū: 'U',\n  ū: 'u',\n  ȕ: 'u',\n  Ȕ: 'U',\n  Ȗ: 'U',\n  ȗ: 'u',\n  ư: 'u',\n  Ư: 'U',\n  ứ: 'u',\n  Ứ: 'U',\n  ừ: 'u',\n  Ừ: 'U',\n  V̆: 'V',\n  v̆: 'v',\n  v̌: 'v',\n  V̌: 'V',\n  Ẃ: 'W',\n  ẃ: 'w',\n  Ẁ: 'W',\n  ẁ: 'w',\n  ŵ: 'w',\n  Ŵ: 'W',\n  W̌: 'W',\n  w̌: 'w',\n  x́: 'x',\n  X́: 'X',\n  X̆: 'X',\n  x̆: 'x',\n  x̌: 'x',\n  X̌: 'X',\n  X̧: 'X',\n  x̧: 'x',\n  Ý: 'Y',\n  ý: 'y',\n  Ỳ: 'Y',\n  ỳ: 'y',\n  y̆: 'y',\n  Y̆: 'Y',\n  Ŷ: 'Y',\n  ŷ: 'y',\n  y̌: 'y',\n  Y̌: 'Y',\n  ÿ: 'y',\n  Ÿ: 'Y',\n  ź: 'z',\n  Ź: 'Z',\n  Ž: 'Z',\n  ž: 'z',\n  Ż: 'Z',\n  ż: 'z',\n  Z̧: 'Z',\n  z̧: 'z'\n};\n/**\n * @param {?} text\n * @return {?}\n */\n\nfunction interpolate(text) {\n  return '{{\\\\s*(' + text + ')\\\\s*}}';\n}\n/**\n * @param {?} blueprint\n * @param {?} map\n * @param {?=} interpolation\n * @return {?}\n */\n\n\nfunction mapReplace(blueprint, map, interpolation) {\n  if (typeof blueprint !== 'string') return '';\n  if (typeof map !== 'object') return blueprint;\n  /** @type {?} */\n\n  const expression = Object.keys(map).join('|');\n  /** @type {?} */\n\n  const mapRegExp = new RegExp(interpolation ? interpolate(expression) : expression, 'g');\n  return blueprint.replace(mapRegExp,\n  /**\n  * @param {?} match\n  * @return {?}\n  */\n  match => {\n    if (interpolation) return String(map[match.replace(/\\{\\{\\s*|\\s*\\}\\}/g, '')]);\n    return String(map[match]);\n  });\n}\n/**\n * @param {?} text\n * @return {?}\n */\n\n\nfunction normalizeDiacritics(text) {\n  return mapReplace(text, CHARMAP);\n}\n/**\n * @param {?} list\n * @return {?}\n */\n\n\nfunction addCommas(list) {\n  return list.reduce(\n  /**\n  * @param {?} acc\n  * @param {?} item\n  * @param {?} index\n  * @param {?} __3\n  * @return {?}\n  */\n  (acc, item, index, {\n    length\n  }) => acc + (!index ? '' : length < 3 ? ' and ' : index === length - 1 ? ', and ' : ', ') + item, '');\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/mappers.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} key\n * @param {?} params\n * @param {?} blueprint\n * @return {?}\n */\n\n\nfunction generateValidationError(key, params, blueprint) {\n  return {\n    key,\n    params,\n    message: mapReplace(blueprint, params, true)\n  };\n}\n/** @type {?} */\n\n\nconst defaultMapErrorsFn =\n/**\n* @param {?} errors\n* @return {?}\n*/\nerrors => {\n  return errors;\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/rxjs-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @deprecated doesn't work with Ivy, will be removed in v1.0\n * @template T\n * @param {?} component\n * @return {?}\n */\n\n\nfunction takeUntilDestroy(component) {\n  /** @type {?} */\n  const proto = Object.getPrototypeOf(component);\n  /** @type {?} */\n\n  const onDestroy = proto.ngOnDestroy;\n  /** @type {?} */\n\n  const destroy$ = new Subject();\n\n  proto.ngOnDestroy =\n  /**\n  * @return {?}\n  */\n  function () {\n    onDestroy.apply(this, arguments);\n    destroy$.next();\n    destroy$.complete();\n  };\n\n  return takeUntil(destroy$);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/abstracts/abstract-validation.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet AbstractValidationDirective = /*#__PURE__*/(() => {\n  class AbstractValidationDirective {\n    /**\n     * @param {?} injector\n     */\n    constructor(injector) {\n      this.injector = injector;\n      this.config = {\n        blueprints: injector.get(VALIDATION_BLUEPRINTS),\n        errorTemplate: injector.get(VALIDATION_ERROR_TEMPLATE),\n        invalidClasses: injector.get(VALIDATION_INVALID_CLASSES),\n        mapErrorsFn: injector.get(VALIDATION_MAP_ERRORS_FN),\n        targetSelector: injector.get(VALIDATION_TARGET_SELECTOR),\n        validateOnSubmit: injector.get(VALIDATION_VALIDATE_ON_SUBMIT)\n      };\n      this.elRef = injector.get(ElementRef);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get group() {\n      return (this.groupRef ||\n      /** @type {?} */\n      {}).form || (this.groupName ||\n      /** @type {?} */\n      {}).control;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get parent() {\n      return this.parentRef || {\n        getStream:\n        /**\n        * @return {?}\n        */\n        () => null\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get blueprints() {\n      return Object.assign({}, BLUEPRINTS, this._blueprints || this.parent.blueprints || this.config.blueprints || {});\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get errorTemplate() {\n      return this._errorTemplate || this.parent.errorTemplate || this.config.errorTemplate;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get invalidClasses() {\n      return this._invalidClasses || this.parent.invalidClasses || this.config.invalidClasses;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get mapErrorsFn() {\n      return this._mapErrorsFn || this.parent.mapErrorsFn || this.config.mapErrorsFn;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get skipValidation() {\n      return evalPropTruthy(this._skipValidation) || this.parent.skipValidation || this.config.skipValidation;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get targetSelector() {\n      return this._targetSelector || this.parent.targetSelector || this.config.targetSelector;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get validateOnSubmit() {\n      return evalPropTruthy(this._validateOnSubmit) || this.parent.validateOnSubmit || this.config.validateOnSubmit;\n    }\n    /**\n     * @param {?} streamName\n     * @return {?}\n     */\n\n\n    getStream(streamName) {\n      return merge(this[streamName + '$'] ?\n      /** @type {?} */\n      this[streamName + '$'].asObservable() : NEVER, this.parent.getStream(streamName) || NEVER);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {}\n\n  }\n\n  AbstractValidationDirective.ɵfac = function AbstractValidationDirective_Factory(t) {\n    return new (t || AbstractValidationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n  };\n\n  AbstractValidationDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AbstractValidationDirective,\n    selectors: [[\"abstractValidationDirective\"]],\n    inputs: {\n      _blueprints: [\"blueprints\", \"_blueprints\"],\n      _errorTemplate: [\"errorTemplate\", \"_errorTemplate\"],\n      _invalidClasses: [\"invalidClasses\", \"_invalidClasses\"],\n      _mapErrorsFn: [\"mapErrorsFn\", \"_mapErrorsFn\"],\n      _skipValidation: [\"skipValidation\", \"_skipValidation\"],\n      _targetSelector: [\"targetSelector\", \"_targetSelector\"],\n      _validateOnSubmit: [\"validateOnSubmit\", \"_validateOnSubmit\"]\n    }\n  });\n  /** @nocollapse */\n\n  return AbstractValidationDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  AbstractValidationDirective.prototype._blueprints;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype._errorTemplate;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype._invalidClasses;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype._mapErrorsFn;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype._skipValidation;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype._targetSelector;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype._validateOnSubmit;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype.config;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype.elRef;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype.groupName;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype.groupRef;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype.parentRef;\n  /** @type {?} */\n\n  AbstractValidationDirective.prototype.injector;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/abstracts/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/validation-error.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ValidationErrorComponent = /*#__PURE__*/(() => {\n  class ValidationErrorComponent {\n    constructor() {\n      this.trackByFn =\n      /**\n      * @param {?} _\n      * @param {?} item\n      * @return {?}\n      */\n      (_, item) => item.key;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get errors() {\n      return this.validationErrors || [];\n    }\n\n  }\n\n  ValidationErrorComponent.ɵfac = function ValidationErrorComponent_Factory(t) {\n    return new (t || ValidationErrorComponent)();\n  };\n\n  ValidationErrorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ValidationErrorComponent,\n    selectors: [[\"validation-error\"]],\n    decls: 1,\n    vars: 2,\n    consts: [[\"class\", \"invalid-feedback\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"invalid-feedback\"]],\n    template: function ValidationErrorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ValidationErrorComponent_div_0_Template, 2, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.errors)(\"ngForTrackBy\", ctx.trackByFn);\n      }\n    },\n    directives: [ɵngcc1.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ValidationErrorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  ValidationErrorComponent.prototype.validationErrors;\n  /** @type {?} */\n\n  ValidationErrorComponent.prototype.trackByFn;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/validation-target.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ValidationTargetDirective = /*#__PURE__*/(() => {\n  class ValidationTargetDirective {\n    /**\n     * @param {?} vcRef\n     */\n    constructor(vcRef) {\n      this.vcRef = vcRef;\n    }\n\n  }\n\n  ValidationTargetDirective.ɵfac = function ValidationTargetDirective_Factory(t) {\n    return new (t || ValidationTargetDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ValidationTargetDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ValidationTargetDirective,\n    selectors: [[\"\", \"validationTarget\", \"\"]],\n    exportAs: [\"validationTarget\"]\n  });\n  /** @nocollapse */\n\n  return ValidationTargetDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  ValidationTargetDirective.prototype.vcRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/validation-container.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ValidationContainerDirective = /*#__PURE__*/(() => {\n  class ValidationContainerDirective {}\n\n  ValidationContainerDirective.ɵfac = function ValidationContainerDirective_Factory(t) {\n    return new (t || ValidationContainerDirective)();\n  };\n\n  ValidationContainerDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ValidationContainerDirective,\n    selectors: [[\"\", \"validationContainer\", \"\"]],\n    contentQueries: function ValidationContainerDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ValidationTargetDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.targetRef = _t.first);\n      }\n    },\n    exportAs: [\"validationContainer\"]\n  });\n  return ValidationContainerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  ValidationContainerDirective.prototype.targetRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/validation-group.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ValidationGroupDirective = /*#__PURE__*/(() => {\n  class ValidationGroupDirective extends AbstractValidationDirective {\n    /**\n     * @param {?} injector\n     * @param {?} cdRef\n     * @param {?} groupName\n     * @param {?} groupRef\n     * @param {?} parentRef\n     */\n    constructor(injector, cdRef, groupName, groupRef, parentRef) {\n      super(injector);\n      this.injector = injector;\n      this.cdRef = cdRef;\n      this.groupName = groupName;\n      this.groupRef = groupRef;\n      this.parentRef = parentRef;\n      this.status$ = new ReplaySubject(1);\n      this.submit$ = new ReplaySubject(1);\n      this.value$ = new ReplaySubject(1);\n      this.subs = new Subscription();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    subscribeToFormSubmit() {\n      /** @type {?} */\n      this.elRef.nativeElement.onsubmit =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this.group.invalid) event.preventDefault();\n        this.submit$.next(this.group);\n        this.cdRef.markForCheck();\n      };\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    subscribeToStatusChanges() {\n      this.subs.add(this.group.statusChanges.subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.status$.next(this.group);\n        this.cdRef.markForCheck();\n      }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    subscribeToValueChanges() {\n      this.subs.add(this.group.valueChanges.subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.value$.next(this.group);\n        this.cdRef.markForCheck();\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (!this.parentRef) this.subscribeToFormSubmit();\n      this.subscribeToStatusChanges();\n      this.subscribeToValueChanges();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.subs.unsubscribe();\n    }\n\n  }\n\n  ValidationGroupDirective.ɵfac = function ValidationGroupDirective_Factory(t) {\n    return new (t || ValidationGroupDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupName, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 10), ɵngcc0.ɵɵdirectiveInject(ValidationGroupDirective, 12));\n  };\n\n  ValidationGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ValidationGroupDirective,\n    selectors: [[\"\", \"formGroup\", \"\"], [\"\", \"formGroupName\", \"\"]],\n    exportAs: [\"validationGroup\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return ValidationGroupDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  ValidationGroupDirective.prototype.status$;\n  /** @type {?} */\n\n  ValidationGroupDirective.prototype.submit$;\n  /** @type {?} */\n\n  ValidationGroupDirective.prototype.value$;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationGroupDirective.prototype.subs;\n  /** @type {?} */\n\n  ValidationGroupDirective.prototype.injector;\n  /** @type {?} */\n\n  ValidationGroupDirective.prototype.cdRef;\n  /** @type {?} */\n\n  ValidationGroupDirective.prototype.groupName;\n  /** @type {?} */\n\n  ValidationGroupDirective.prototype.groupRef;\n  /** @type {?} */\n\n  ValidationGroupDirective.prototype.parentRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/validation-style.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ValidationStyleDirective = /*#__PURE__*/(() => {\n  class ValidationStyleDirective {\n    /**\n     * @param {?} elRef\n     */\n    constructor(elRef) {\n      this.elRef = elRef;\n    }\n\n  }\n\n  ValidationStyleDirective.ɵfac = function ValidationStyleDirective_Factory(t) {\n    return new (t || ValidationStyleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ValidationStyleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ValidationStyleDirective,\n    selectors: [[\"\", \"validationStyle\", \"\"]],\n    exportAs: [\"validationStyle\"]\n  });\n  /** @nocollapse */\n\n  return ValidationStyleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  ValidationStyleDirective.prototype.elRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/validation.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ValidationDirective = /*#__PURE__*/(() => {\n  class ValidationDirective extends AbstractValidationDirective {\n    /**\n     * @param {?} injector\n     * @param {?} cdRef\n     * @param {?} cfRes\n     * @param {?} control\n     * @param {?} renderer\n     * @param {?} vcRef\n     * @param {?} parentRef\n     * @param {?} markRef\n     * @param {?} targetRef\n     * @param {?} containerRef\n     * @param {?} formGroupDirective\n     */\n    constructor(injector, cdRef, cfRes, control, renderer, vcRef, parentRef, markRef, targetRef, containerRef, formGroupDirective) {\n      super(injector);\n      this.injector = injector;\n      this.cdRef = cdRef;\n      this.cfRes = cfRes;\n      this.control = control;\n      this.renderer = renderer;\n      this.vcRef = vcRef;\n      this.parentRef = parentRef;\n      this.markRef = markRef;\n      this.targetRef = targetRef;\n      this.containerRef = containerRef;\n      this.formGroupDirective = formGroupDirective;\n      this.isSubmitted = false;\n      this.subscriptions = new Subscription();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get validation$() {\n      return merge(this.parent.getStream('status').pipe(mapTo(null)), this.parent.getStream('value').pipe(mapTo(null)), this.parent.getStream('submit'));\n    }\n    /**\n     * @private\n     * @param {?} errors\n     * @return {?}\n     */\n\n\n    buildErrors(errors) {\n      return Object.keys(errors || {}).map(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      key => generateValidationError(key, errors[key], this.blueprints[key]));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    insertErrorClasses() {\n      this.renderer.addClass(this.markElement, this.invalidClasses);\n    }\n    /**\n     * @private\n     * @this {?}\n     * @param {?} errors\n     * @return {?}\n     */\n\n\n    insertErrors(errors) {\n      /** @type {?} */\n      const template = this.errorTemplate;\n      /** @type {?} */\n\n      const targetRef = this.containerRef ? this.containerRef.targetRef : this.targetRef;\n      /** @type {?} */\n\n      const vcRef = targetRef ? targetRef.vcRef : this.vcRef;\n      this.errorRef = template instanceof TemplateRef ? vcRef.createEmbeddedView(template, {\n        $implicit: errors\n      }, vcRef.length) : vcRef.createComponent(this.cfRes.resolveComponentFactory(template), vcRef.length, this.injector);\n      if (this.errorRef instanceof ComponentRef && this.errorRef.instance)\n      /** @type {?} */\n      this.errorRef.instance.validationErrors = errors;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    removeErrorClasses() {\n      this.renderer.removeClass(this.markElement, this.invalidClasses);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    removeErrors() {\n      if (this.errorRef) {\n        this.errorRef.destroy();\n        this.errorRef = null;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    setMarkElement() {\n      this.markElement = (this.markRef ? this.markRef.elRef.nativeElement : this.targetSelector ? this.elRef.nativeElement.closest(this.targetSelector) : null) || this.elRef.nativeElement;\n    }\n    /**\n     * @private\n     * @param {?} errors\n     * @return {?}\n     */\n\n\n    shouldValidate(errors) {\n      return errors.length && this.control.dirty && (!this.validateOnSubmit || this.isSubmitted);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    subscribeToValidation() {\n      /** @type {?} */\n      let cached;\n      this.subscriptions.add(this.validation$.pipe(filter(\n      /**\n      * @return {?}\n      */\n      () => !this.skipValidation), tap(\n      /**\n      * @param {?} form\n      * @return {?}\n      */\n      form => {\n        if (form && this.formGroupDirective.submitted) {\n          this.control.control.markAsDirty();\n          this.isSubmitted = true;\n        }\n      }), map(\n      /**\n      * @return {?}\n      */\n      () => this.mapErrorsFn(this.buildErrors(this.control.errors), this.buildErrors((this.parentRef.group ||\n      /** @type {?} */\n      {}).errors), this.control))).subscribe(\n      /**\n      * @param {?} errors\n      * @return {?}\n      */\n      errors => {\n        if (cached === JSON.stringify(errors)) return;\n        this.removeErrors();\n\n        if (this.shouldValidate(errors)) {\n          this.insertErrors(errors);\n          if (!cached) this.insertErrorClasses();\n          cached = JSON.stringify(errors);\n        } else {\n          this.removeErrorClasses();\n          cached = '';\n        }\n\n        this.cdRef.markForCheck();\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this.setMarkElement();\n      this.subscribeToValidation();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n\n  }\n\n  ValidationDirective.ɵfac = function ValidationDirective_Factory(t) {\n    return new (t || ValidationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ValidationGroupDirective, 4), ɵngcc0.ɵɵdirectiveInject(ValidationStyleDirective, 12), ɵngcc0.ɵɵdirectiveInject(ValidationTargetDirective, 12), ɵngcc0.ɵɵdirectiveInject(ValidationContainerDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8));\n  };\n\n  ValidationDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ValidationDirective,\n    selectors: [[\"\", \"formControl\", \"\"], [\"\", \"formControlName\", \"\"]],\n    exportAs: [\"validationDirective\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return ValidationDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ValidationDirective.prototype.errorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.markElement;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.isSubmitted;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.subscriptions;\n  /** @type {?} */\n\n  ValidationDirective.prototype.injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.cdRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.cfRes;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.control;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.vcRef;\n  /** @type {?} */\n\n  ValidationDirective.prototype.parentRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.markRef;\n  /** @type {?} */\n\n  ValidationDirective.prototype.targetRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.containerRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ValidationDirective.prototype.formGroupDirective;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/core.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxValidateCoreModule = /*#__PURE__*/(() => {\n  class NgxValidateCoreModule {\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config =\n    /** @type {?} */\n    {}) {\n      return {\n        ngModule: NgxValidateCoreModule,\n        providers: [{\n          provide: VALIDATION_BLUEPRINTS,\n          useValue: config.blueprints || BLUEPRINTS\n        }, {\n          provide: VALIDATION_ERROR_TEMPLATE,\n          useValue: config.errorTemplate || ValidationErrorComponent\n        }, {\n          provide: VALIDATION_INVALID_CLASSES,\n          useValue: config.invalidClasses || 'is-invalid'\n        }, {\n          provide: VALIDATION_MAP_ERRORS_FN,\n          useValue: config.mapErrorsFn || defaultMapErrorsFn\n        }, {\n          provide: VALIDATION_TARGET_SELECTOR,\n          useValue: config.targetSelector\n        }, {\n          provide: VALIDATION_VALIDATE_ON_SUBMIT,\n          useValue: config.validateOnSubmit\n        }]\n      };\n    }\n\n  }\n\n  NgxValidateCoreModule.ɵfac = function NgxValidateCoreModule_Factory(t) {\n    return new (t || NgxValidateCoreModule)();\n  };\n\n  NgxValidateCoreModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxValidateCoreModule\n  });\n  NgxValidateCoreModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n  });\n  return NgxValidateCoreModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxValidateCoreModule, {\n    declarations: function () {\n      return [ValidationErrorComponent, AbstractValidationDirective, ValidationContainerDirective, ValidationGroupDirective, ValidationStyleDirective, ValidationTargetDirective, ValidationDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ReactiveFormsModule];\n    },\n    exports: function () {\n      return [ValidationContainerDirective, ValidationGroupDirective, ValidationStyleDirective, ValidationTargetDirective, ValidationDirective];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/validation.model.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar Validation;\n\n(function (Validation) {\n  /**\n   * @record\n   */\n  function Blueprints() {}\n\n  Validation.Blueprints = Blueprints;\n  /**\n   * @record\n   */\n\n  function ParamMap() {}\n\n  Validation.ParamMap = ParamMap;\n  /**\n   * @record\n   */\n\n  function Error() {}\n\n  Validation.Error = Error;\n\n  if (false) {\n    /** @type {?} */\n    Error.prototype.key;\n    /** @type {?|undefined} */\n\n    Error.prototype.params;\n    /** @type {?|undefined} */\n\n    Error.prototype.message;\n  }\n})(Validation || (Validation = {}));\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/validators/password-validators.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction comparePasswords([controlName1, controlName2]) {\n  return (\n    /**\n    * @param {?} group\n    * @return {?}\n    */\n    group => {\n      /** @type {?} */\n      const password = group.get(controlName1).value;\n      /** @type {?} */\n\n      const repeat = group.get(controlName2).value;\n      return !password || !repeat || password === repeat ? null : {\n        passwordMismatch: {\n          fields: [controlName1, controlName2]\n        }\n      };\n    }\n  );\n}\n/**\n * @param {?=} shouldContain\n * @return {?}\n */\n\n\nfunction validatePassword(shouldContain = ['small', 'capital', 'number', 'special']) {\n  return (\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    control => {\n      if (!control.value) return null;\n      /** @type {?} */\n\n      const value = normalizeDiacritics(control.value);\n      /** @type {?} */\n\n      const regex = {\n        small: /.*[a-z].*/,\n        capital: /.*[A-Z].*/,\n        number: /.*[0-9].*/,\n        special: /.*[^0-9a-zA-Z].*/\n      };\n      /** @type {?} */\n\n      const missing = shouldContain.filter(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      key => !regex[key].test(value));\n      return missing.length ? {\n        invalidPassword: {\n          missing,\n          description: addCommas(missing.map(\n          /**\n          * @param {?} key\n          * @return {?}\n          */\n          key => ({\n            small: 'a small letter',\n            capital: 'a capital',\n            number: 'a number',\n            special: 'a special character'\n          })[key]))\n        }\n      } : null;\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/validators/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-validate-core.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { AbstractValidationDirective, BLUEPRINTS, NgxValidateCoreModule, VALIDATION_BLUEPRINTS, VALIDATION_ERROR_TEMPLATE, VALIDATION_INVALID_CLASSES, VALIDATION_MAP_ERRORS_FN, VALIDATION_TARGET_SELECTOR, VALIDATION_VALIDATE_ON_SUBMIT, ValidationContainerDirective, ValidationDirective, ValidationErrorComponent, ValidationGroupDirective, ValidationStyleDirective, ValidationTargetDirective, addCommas, comparePasswords, defaultMapErrorsFn, evalPropTruthy, generateValidationError, interpolate, mapReplace, normalizeDiacritics, takeUntilDestroy, validatePassword, ValidationContainerDirective as ɵa, ValidationTargetDirective as ɵb, ValidationGroupDirective as ɵc, AbstractValidationDirective as ɵd, ValidationStyleDirective as ɵe, ValidationDirective as ɵf, ValidationErrorComponent as ɵg, AbstractValidationDirective as ɵh, VALIDATION_BLUEPRINTS as ɵi, BLUEPRINTS as ɵj, VALIDATION_ERROR_TEMPLATE as ɵk, VALIDATION_INVALID_CLASSES as ɵl, VALIDATION_MAP_ERRORS_FN as ɵm, defaultMapErrorsFn as ɵn, VALIDATION_TARGET_SELECTOR as ɵo, VALIDATION_VALIDATE_ON_SUBMIT as ɵp }; //# sourceMappingURL=ngx-validate-core.js.map","map":null,"metadata":{},"sourceType":"module"}