{"ast":null,"code":"var collectionCompare = compare;\n/*\n  primitives: value1 === value2\n  functions: value1.toString == value2.toString\n  arrays: if length, sequence and values of properties are identical\n  objects: if length, names and values of properties are identical\n  compare([[1, [2, 3]], [[1, [2, 3]]); // true\n  compare([[1, [2, 3], 4], [[1, [2, 3]]); // false\n  compare({a: 2, b: 3}, {a: 2, b: 3}); // true\n  compare({a: 2, b: 3}, {b: 3, a: 2}); // true\n  compare({a: 2, b: 3, c: 4}, {a: 2, b: 3}); // false\n  compare({a: 2, b: 3}, {a: 2, b: 3, c: 4}); // false\n  compare([[1, [2, {a: 4}], 4], [[1, [2, {a: 4}]]); // true\n*/\n\nfunction compare(value1, value2) {\n  if (value1 === value2) {\n    return true;\n  }\n  /* eslint-disable no-self-compare */\n  // if both values are NaNs return true\n\n\n  if (value1 !== value1 && value2 !== value2) {\n    return true;\n  }\n\n  if ({}.toString.call(value1) != {}.toString.call(value2)) {\n    return false;\n  }\n\n  if (value1 !== Object(value1)) {\n    // non equal primitives\n    return false;\n  }\n\n  if (!value1) {\n    return false;\n  }\n\n  if (Array.isArray(value1)) {\n    return compareArrays(value1, value2);\n  }\n\n  if ({}.toString.call(value1) == '[object Set]') {\n    return compareArrays(Array.from(value1), Array.from(value2));\n  }\n\n  if ({}.toString.call(value1) == '[object Object]') {\n    return compareObjects(value1, value2);\n  } else {\n    return compareNativeSubtypes(value1, value2);\n  }\n}\n\nfunction compareNativeSubtypes(value1, value2) {\n  // e.g. Function, RegExp, Date\n  return value1.toString() === value2.toString();\n}\n\nfunction compareArrays(value1, value2) {\n  var len = value1.length;\n\n  if (len != value2.length) {\n    return false;\n  }\n\n  var alike = true;\n\n  for (var i = 0; i < len; i++) {\n    if (!compare(value1[i], value2[i])) {\n      alike = false;\n      break;\n    }\n  }\n\n  return alike;\n}\n\nfunction compareObjects(value1, value2) {\n  var keys1 = Object.keys(value1).sort();\n  var keys2 = Object.keys(value2).sort();\n  var len = keys1.length;\n\n  if (len != keys2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var key1 = keys1[i];\n    var key2 = keys2[i];\n\n    if (!(key1 == key2 && compare(value1[key1], value2[key2]))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { collectionCompare as default };","map":null,"metadata":{},"sourceType":"module"}