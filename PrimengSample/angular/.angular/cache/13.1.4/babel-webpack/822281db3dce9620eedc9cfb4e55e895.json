{"ast":null,"code":"import { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, ChangeDetectorRef, IterableDiffers, Input, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { RippleModule } from 'primeng/ripple';\nimport { TranslationKeys, PrimeNGConfig, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { UniqueComponentId, ObjectUtils } from 'primeng/utils';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'primeng/api';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'primeng/button';\nimport * as ɵngcc4 from 'primeng/ripple';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nconst _c0 = [\"container\"];\nconst _c1 = [\"in\"];\nconst _c2 = [\"multiIn\"];\nconst _c3 = [\"multiContainer\"];\nconst _c4 = [\"ddBtn\"];\n\nconst _c5 = function (a0, a1) {\n  return {\n    \"p-autocomplete-dd-input\": a0,\n    \"p-disabled\": a1\n  };\n};\n\nfunction AutoComplete_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 7, 8);\n    ɵngcc0.ɵɵlistener(\"click\", function AutoComplete_input_2_Template_input_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.onInputClick($event);\n    })(\"input\", function AutoComplete_input_2_Template_input_input_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onInput($event);\n    })(\"keydown\", function AutoComplete_input_2_Template_input_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onKeydown($event);\n    })(\"keyup\", function AutoComplete_input_2_Template_input_keyup_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onKeyup($event);\n    })(\"focus\", function AutoComplete_input_2_Template_input_focus_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onInputFocus($event);\n    })(\"blur\", function AutoComplete_input_2_Template_input_blur_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onInputBlur($event);\n    })(\"change\", function AutoComplete_input_2_Template_input_change_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.onInputChange($event);\n    })(\"paste\", function AutoComplete_input_2_Template_input_paste_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.onInputPaste($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r1.inputStyleClass);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r1.inputStyle)(\"autocomplete\", ctx_r1.autocomplete)(\"ngClass\", ɵngcc0.ɵɵpureFunction2(23, _c5, ctx_r1.dropdown, ctx_r1.disabled))(\"value\", ctx_r1.inputFieldValue)(\"readonly\", ctx_r1.readonly)(\"disabled\", ctx_r1.disabled);\n    ɵngcc0.ɵɵattribute(\"type\", ctx_r1.type)(\"id\", ctx_r1.inputId)(\"required\", ctx_r1.required)(\"name\", ctx_r1.name)(\"aria-controls\", ctx_r1.listId)(\"aria-expanded\", ctx_r1.overlayVisible)(\"aria-activedescendant\", \"p-highlighted-option\")(\"autofocus\", ctx_r1.autofocus)(\"placeholder\", ctx_r1.placeholder)(\"size\", ctx_r1.size)(\"maxlength\", ctx_r1.maxlength)(\"tabindex\", ctx_r1.tabindex)(\"aria-label\", ctx_r1.ariaLabel)(\"aria-labelledby\", ctx_r1.ariaLabelledBy)(\"aria-required\", ctx_r1.required);\n  }\n}\n\nfunction AutoComplete_ul_3_li_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction AutoComplete_ul_3_li_2_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 20);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const val_r19 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r22.resolveFieldData(val_r19));\n  }\n}\n\nfunction AutoComplete_ul_3_li_2_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 21);\n    ɵngcc0.ɵɵlistener(\"click\", function AutoComplete_ul_3_li_2_span_4_Template_span_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r26);\n      ɵngcc0.ɵɵnextContext();\n\n      const _r20 = ɵngcc0.ɵɵreference(1);\n\n      const ctx_r25 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r25.removeItem(_r20);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c6 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction AutoComplete_ul_3_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 15, 16);\n    ɵngcc0.ɵɵtemplate(2, AutoComplete_ul_3_li_2_ng_container_2_Template, 1, 0, \"ng-container\", 17);\n    ɵngcc0.ɵɵtemplate(3, AutoComplete_ul_3_li_2_span_3_Template, 2, 1, \"span\", 18);\n    ɵngcc0.ɵɵtemplate(4, AutoComplete_ul_3_li_2_span_4_Template, 1, 0, \"span\", 19);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const val_r19 = ctx.$implicit;\n    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r17.selectedItemTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(4, _c6, val_r19));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r17.selectedItemTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r17.disabled && !ctx_r17.readonly);\n  }\n}\n\nconst _c7 = function (a0, a1) {\n  return {\n    \"p-disabled\": a0,\n    \"p-focus\": a1\n  };\n};\n\nfunction AutoComplete_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ul\", 9, 10);\n    ɵngcc0.ɵɵlistener(\"click\", function AutoComplete_ul_3_Template_ul_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r28);\n\n      const _r18 = ɵngcc0.ɵɵreference(5);\n\n      return _r18.focus();\n    });\n    ɵngcc0.ɵɵtemplate(2, AutoComplete_ul_3_li_2_Template, 5, 6, \"li\", 11);\n    ɵngcc0.ɵɵelementStart(3, \"li\", 12);\n    ɵngcc0.ɵɵelementStart(4, \"input\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"input\", function AutoComplete_ul_3_Template_input_input_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r29 = ɵngcc0.ɵɵnextContext();\n      return ctx_r29.onInput($event);\n    })(\"click\", function AutoComplete_ul_3_Template_input_click_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r30 = ɵngcc0.ɵɵnextContext();\n      return ctx_r30.onInputClick($event);\n    })(\"keydown\", function AutoComplete_ul_3_Template_input_keydown_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r31 = ɵngcc0.ɵɵnextContext();\n      return ctx_r31.onKeydown($event);\n    })(\"keyup\", function AutoComplete_ul_3_Template_input_keyup_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r32 = ɵngcc0.ɵɵnextContext();\n      return ctx_r32.onKeyup($event);\n    })(\"focus\", function AutoComplete_ul_3_Template_input_focus_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r33 = ɵngcc0.ɵɵnextContext();\n      return ctx_r33.onInputFocus($event);\n    })(\"blur\", function AutoComplete_ul_3_Template_input_blur_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r34 = ɵngcc0.ɵɵnextContext();\n      return ctx_r34.onInputBlur($event);\n    })(\"change\", function AutoComplete_ul_3_Template_input_change_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r35 = ɵngcc0.ɵɵnextContext();\n      return ctx_r35.onInputChange($event);\n    })(\"paste\", function AutoComplete_ul_3_Template_input_paste_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r36 = ɵngcc0.ɵɵnextContext();\n      return ctx_r36.onInputPaste($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(20, _c7, ctx_r2.disabled, ctx_r2.focus));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2.value);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassMap(ctx_r2.inputStyleClass);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r2.disabled)(\"readonly\", ctx_r2.readonly)(\"autocomplete\", ctx_r2.autocomplete)(\"ngStyle\", ctx_r2.inputStyle);\n    ɵngcc0.ɵɵattribute(\"type\", ctx_r2.type)(\"id\", ctx_r2.inputId)(\"placeholder\", ctx_r2.value && ctx_r2.value.length ? null : ctx_r2.placeholder)(\"tabindex\", ctx_r2.tabindex)(\"maxlength\", ctx_r2.maxlength)(\"autofocus\", ctx_r2.autofocus)(\"aria-label\", ctx_r2.ariaLabel)(\"aria-labelledby\", ctx_r2.ariaLabelledBy)(\"aria-required\", ctx_r2.required)(\"aria-controls\", ctx_r2.listId)(\"aria-expanded\", ctx_r2.overlayVisible)(\"aria-activedescendant\", \"p-highlighted-option\");\n  }\n}\n\nfunction AutoComplete_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 22);\n  }\n}\n\nfunction AutoComplete_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r39 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 23, 24);\n    ɵngcc0.ɵɵlistener(\"click\", function AutoComplete_button_5_Template_button_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r39);\n      const ctx_r38 = ɵngcc0.ɵɵnextContext();\n      return ctx_r38.handleDropdownClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"icon\", ctx_r4.dropdownIcon)(\"disabled\", ctx_r4.disabled);\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r4.tabindex);\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_4_ng_template_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const optgroup_r48 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r49 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r49.getOptionGroupLabel(optgroup_r48) || \"empty\");\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_4_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_4_ng_template_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_4_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 31);\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_container_4_ng_template_1_span_1_Template, 2, 1, \"span\", 28);\n    ɵngcc0.ɵɵtemplate(2, AutoComplete_div_6_ng_container_4_ng_template_1_ng_container_2_Template, 1, 0, \"ng-container\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, AutoComplete_div_6_ng_container_4_ng_template_1_ng_container_3_Template, 1, 0, \"ng-container\", 17);\n  }\n\n  if (rf & 2) {\n    const optgroup_r48 = ctx.$implicit;\n    ɵngcc0.ɵɵnextContext(2);\n\n    const _r44 = ɵngcc0.ɵɵreference(7);\n\n    const ctx_r47 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r47.groupTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r47.groupTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(5, _c6, optgroup_r48));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r44)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(7, _c6, ctx_r47.getOptionGroupChildren(optgroup_r48)));\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_container_4_ng_template_1_Template, 4, 9, \"ng-template\", 30);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r42 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r42.suggestions);\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_container_5_ng_container_1_Template, 1, 0, \"ng-container\", 17);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n\n    const _r44 = ɵngcc0.ɵɵreference(7);\n\n    const ctx_r43 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r44)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c6, ctx_r43.suggestions));\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_ng_container_0_li_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r60 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r62 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r62.resolveFieldData(option_r60));\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_ng_container_0_li_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c8 = function (a0) {\n  return {\n    \"p-highlight\": a0\n  };\n};\n\nconst _c9 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    index: a1\n  };\n};\n\nfunction AutoComplete_div_6_ng_template_6_ng_container_0_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r66 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 36);\n    ɵngcc0.ɵɵlistener(\"click\", function AutoComplete_div_6_ng_template_6_ng_container_0_li_1_Template_li_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r66);\n      const option_r60 = restoredCtx.$implicit;\n      const ctx_r65 = ɵngcc0.ɵɵnextContext(4);\n      return ctx_r65.selectItem(option_r60);\n    });\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_template_6_ng_container_0_li_1_span_1_Template, 2, 1, \"span\", 28);\n    ɵngcc0.ɵɵtemplate(2, AutoComplete_div_6_ng_template_6_ng_container_0_li_1_ng_container_2_Template, 1, 0, \"ng-container\", 17);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r60 = ctx.$implicit;\n    const idx_r61 = ctx.index;\n    const ctx_r59 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(5, _c8, option_r60 === ctx_r59.highlightOption))(\"id\", ctx_r59.highlightOption == option_r60 ? \"p-highlighted-option\" : \"\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r59.itemTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r59.itemTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(7, _c9, option_r60, idx_r61));\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_template_6_ng_container_0_li_1_Template, 3, 10, \"li\", 35);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const suggestionsToDisplay_r54 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", suggestionsToDisplay_r54);\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r70 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r77 = ɵngcc0.ɵɵnextContext(5);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r77.resolveFieldData(option_r70));\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c10 = function (a0) {\n  return {\n    \"height\": a0\n  };\n};\n\nfunction AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r81 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"li\", 40);\n    ɵngcc0.ɵɵlistener(\"click\", function AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_1_Template_li_click_1_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r81);\n      const option_r70 = restoredCtx.$implicit;\n      const ctx_r80 = ɵngcc0.ɵɵnextContext(5);\n      return ctx_r80.selectItem(option_r70);\n    });\n    ɵngcc0.ɵɵtemplate(2, AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_1_span_2_Template, 2, 1, \"span\", 28);\n    ɵngcc0.ɵɵtemplate(3, AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_1_ng_container_3_Template, 1, 0, \"ng-container\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const option_r70 = ctx.$implicit;\n    const i_r71 = ctx.index;\n    const ctx_r69 = ɵngcc0.ɵɵnextContext(5);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(6, _c8, option_r70 === ctx_r69.highlightOption))(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(8, _c10, ctx_r69.itemSize + \"px\"))(\"id\", ctx_r69.highlightOption == option_r70 ? \"p-highlighted-option\" : \"\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r69.itemTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r69.itemTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(10, _c9, option_r70, i_r71));\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 38);\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_1_Template, 4, 13, \"ng-container\", 39);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const suggestionsToDisplay_r54 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r68 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(3, _c10, ctx_r68.scrollHeight))(\"itemSize\", ctx_r68.itemSize);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", suggestionsToDisplay_r54);\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, AutoComplete_div_6_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_Template, 2, 5, \"cdk-virtual-scroll-viewport\", 37);\n  }\n\n  if (rf & 2) {\n    const ctx_r57 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r57.virtualScroll && !ctx_r57.noResults);\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_li_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r83 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r83.emptyMessageLabel, \" \");\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_li_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, null, 42);\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 41);\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_template_6_li_3_ng_container_1_Template, 2, 1, \"ng-container\", 32);\n    ɵngcc0.ɵɵtemplate(2, AutoComplete_div_6_ng_template_6_li_3_ng_container_2_Template, 2, 0, \"ng-container\", 26);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r58 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r58.emptyTemplate)(\"ngIfElse\", ctx_r58.empty);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r58.emptyTemplate);\n  }\n}\n\nfunction AutoComplete_div_6_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, AutoComplete_div_6_ng_template_6_ng_container_0_Template, 2, 1, \"ng-container\", 32);\n    ɵngcc0.ɵɵtemplate(1, AutoComplete_div_6_ng_template_6_ng_template_1_Template, 1, 1, \"ng-template\", null, 33, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵtemplate(3, AutoComplete_div_6_ng_template_6_li_3_Template, 3, 3, \"li\", 34);\n  }\n\n  if (rf & 2) {\n    const _r56 = ɵngcc0.ɵɵreference(2);\n\n    const ctx_r45 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r45.virtualScroll)(\"ngIfElse\", _r56);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r45.noResults && ctx_r45.showEmptyMessage);\n  }\n}\n\nfunction AutoComplete_div_6_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c11 = function () {\n  return [\"p-autocomplete-panel p-component\"];\n};\n\nconst _c12 = function (a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\n\nconst _c13 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nconst _c14 = function (a0) {\n  return {\n    \"p-autocomplete-virtualscroll\": a0\n  };\n};\n\nfunction AutoComplete_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r87 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 25);\n    ɵngcc0.ɵɵlistener(\"@overlayAnimation.start\", function AutoComplete_div_6_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r87);\n      const ctx_r86 = ɵngcc0.ɵɵnextContext();\n      return ctx_r86.onOverlayAnimationStart($event);\n    });\n    ɵngcc0.ɵɵtemplate(2, AutoComplete_div_6_ng_container_2_Template, 1, 0, \"ng-container\", 26);\n    ɵngcc0.ɵɵelementStart(3, \"ul\", 27);\n    ɵngcc0.ɵɵtemplate(4, AutoComplete_div_6_ng_container_4_Template, 2, 1, \"ng-container\", 28);\n    ɵngcc0.ɵɵtemplate(5, AutoComplete_div_6_ng_container_5_Template, 2, 4, \"ng-container\", 28);\n    ɵngcc0.ɵɵtemplate(6, AutoComplete_div_6_ng_template_6_Template, 4, 3, \"ng-template\", null, 29, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(8, AutoComplete_div_6_ng_container_8_Template, 1, 0, \"ng-container\", 26);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r5.panelStyleClass);\n    ɵngcc0.ɵɵstyleProp(\"max-height\", ctx_r5.virtualScroll ? \"auto\" : ctx_r5.scrollHeight);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction0(13, _c11))(\"ngStyle\", ctx_r5.panelStyle)(\"@overlayAnimation\", ɵngcc0.ɵɵpureFunction1(17, _c13, ɵngcc0.ɵɵpureFunction2(14, _c12, ctx_r5.showTransitionOptions, ctx_r5.hideTransitionOptions)));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.headerTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(19, _c14, ctx_r5.virtualScroll));\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r5.listId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.group);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r5.group);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.footerTemplate);\n  }\n}\n\nconst _c15 = function (a1, a2) {\n  return {\n    \"p-autocomplete p-component\": true,\n    \"p-autocomplete-dd\": a1,\n    \"p-autocomplete-multiple\": a2\n  };\n};\n\nconst AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => AutoComplete),\n  multi: true\n};\nlet AutoComplete = /*#__PURE__*/(() => {\n  class AutoComplete {\n    constructor(el, renderer, cd, differs, config) {\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.differs = differs;\n      this.config = config;\n      this.minLength = 1;\n      this.delay = 300;\n      this.type = 'text';\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.dropdownIcon = \"pi pi-chevron-down\";\n      this.unique = true;\n      this.completeOnFocus = false;\n      this.completeMethod = new EventEmitter();\n      this.onSelect = new EventEmitter();\n      this.onUnselect = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onDropdownClick = new EventEmitter();\n      this.onClear = new EventEmitter();\n      this.onKeyUp = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.scrollHeight = '200px';\n      this.dropdownMode = 'blank';\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.autocomplete = 'off';\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n\n      this.overlayVisible = false;\n      this.focus = false;\n      this.inputFieldValue = null;\n      this.differ = differs.find([]).create(null);\n      this.listId = UniqueComponentId() + '_list';\n    }\n\n    get suggestions() {\n      return this._suggestions;\n    }\n\n    set suggestions(val) {\n      this._suggestions = val;\n      this.handleSuggestionsChange();\n    }\n\n    ngAfterViewChecked() {\n      //Use timeouts as since Angular 4.2, AfterViewChecked is broken and not called after panel is updated\n      if (this.suggestionsUpdated && this.overlay && this.overlay.offsetParent) {\n        setTimeout(() => {\n          if (this.overlay) {\n            this.alignOverlay();\n          }\n        }, 1);\n        this.suggestionsUpdated = false;\n      }\n\n      if (this.highlightOptionChanged) {\n        setTimeout(() => {\n          if (this.overlay && this.itemsWrapper) {\n            let listItem = DomHandler.findSingle(this.overlay, 'li.p-highlight');\n\n            if (listItem) {\n              DomHandler.scrollInView(this.itemsWrapper, listItem);\n            }\n\n            if (this.virtualScroll && this.viewPort) {\n              let range = this.viewPort.getRenderedRange();\n              this.updateVirtualScrollSelectedIndex();\n\n              if (range.start > this.virtualScrollSelectedIndex || range.end < this.virtualScrollSelectedIndex) {\n                this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n              }\n            }\n          }\n        }, 1);\n        this.highlightOptionChanged = false;\n      }\n    }\n\n    handleSuggestionsChange() {\n      if (this._suggestions != null && this.loading) {\n        this.highlightOption = null;\n\n        if (this._suggestions.length) {\n          this.noResults = false;\n          this.show();\n          this.suggestionsUpdated = true;\n\n          if (this.autoHighlight) {\n            this.highlightOption = this._suggestions[0];\n          }\n        } else {\n          this.noResults = true;\n\n          if (this.showEmptyMessage) {\n            this.show();\n            this.suggestionsUpdated = true;\n          } else {\n            this.hide();\n          }\n        }\n\n        this.loading = false;\n      }\n    }\n\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'item':\n            this.itemTemplate = item.template;\n            break;\n\n          case 'group':\n            this.groupTemplate = item.template;\n            break;\n\n          case 'selectedItem':\n            this.selectedItemTemplate = item.template;\n            break;\n\n          case 'header':\n            this.headerTemplate = item.template;\n            break;\n\n          case 'empty':\n            this.emptyTemplate = item.template;\n            break;\n\n          case 'footer':\n            this.footerTemplate = item.template;\n            break;\n\n          default:\n            this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n\n    updateVirtualScrollSelectedIndex() {\n      if (this.highlightOption && this.suggestions && this.suggestions.length) {\n        this.virtualScrollSelectedIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n      }\n    }\n\n    writeValue(value) {\n      this.value = value;\n      this.filled = this.value && this.value != '';\n      this.updateInputField();\n      this.cd.markForCheck();\n    }\n\n    getOptionGroupChildren(optionGroup) {\n      return this.optionGroupChildren ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;\n    }\n\n    getOptionGroupLabel(optionGroup) {\n      return this.optionGroupLabel ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel) : optionGroup.label != undefined ? optionGroup.label : optionGroup;\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    onInput(event) {\n      // When an input element with a placeholder is clicked, the onInput event is invoked in IE.\n      if (!this.inputKeyDown && DomHandler.isIE()) {\n        return;\n      }\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      let value = event.target.value;\n\n      if (!this.multiple && !this.forceSelection) {\n        this.onModelChange(value);\n      }\n\n      if (value.length === 0 && !this.multiple) {\n        this.hide();\n        this.onClear.emit(event);\n        this.onModelChange(value);\n      }\n\n      if (value.length >= this.minLength) {\n        this.timeout = setTimeout(() => {\n          this.search(event, value);\n        }, this.delay);\n      } else {\n        this.hide();\n      }\n\n      this.updateFilledState();\n      this.inputKeyDown = false;\n    }\n\n    onInputClick(event) {\n      if (this.documentClickListener) {\n        this.inputClick = true;\n      }\n    }\n\n    search(event, query) {\n      //allow empty string but not undefined or null\n      if (query === undefined || query === null) {\n        return;\n      }\n\n      this.loading = true;\n      this.completeMethod.emit({\n        originalEvent: event,\n        query: query\n      });\n    }\n\n    selectItem(option, focus = true) {\n      if (this.forceSelectionUpdateModelTimeout) {\n        clearTimeout(this.forceSelectionUpdateModelTimeout);\n        this.forceSelectionUpdateModelTimeout = null;\n      }\n\n      if (this.multiple) {\n        this.multiInputEL.nativeElement.value = '';\n        this.value = this.value || [];\n\n        if (!this.isSelected(option) || !this.unique) {\n          this.value = [...this.value, option];\n          this.onModelChange(this.value);\n        }\n      } else {\n        this.inputEL.nativeElement.value = this.resolveFieldData(option);\n        this.value = option;\n        this.onModelChange(this.value);\n      }\n\n      this.onSelect.emit(option);\n      this.updateFilledState();\n\n      if (focus) {\n        this.itemClicked = true;\n        this.focusInput();\n      }\n    }\n\n    show() {\n      if (this.multiInputEL || this.inputEL) {\n        let hasFocus = this.multiple ? this.multiInputEL.nativeElement.ownerDocument.activeElement == this.multiInputEL.nativeElement : this.inputEL.nativeElement.ownerDocument.activeElement == this.inputEL.nativeElement;\n\n        if (!this.overlayVisible && hasFocus) {\n          this.overlayVisible = true;\n        }\n      }\n    }\n\n    onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.overlay = event.element;\n          this.itemsWrapper = this.virtualScroll ? DomHandler.findSingle(this.overlay, '.cdk-virtual-scroll-viewport') : this.overlay;\n          this.appendOverlay();\n\n          if (this.autoZIndex) {\n            this.overlay.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n          }\n\n          this.alignOverlay();\n          this.bindDocumentClickListener();\n          this.bindDocumentResizeListener();\n          this.bindScrollListener();\n          this.onShow.emit(event);\n          break;\n\n        case 'void':\n          this.onOverlayHide();\n          break;\n      }\n    }\n\n    appendOverlay() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlay);else DomHandler.appendChild(this.overlay, this.appendTo);\n\n        if (!this.overlay.style.minWidth) {\n          this.overlay.style.minWidth = DomHandler.getWidth(this.el.nativeElement.children[0]) + 'px';\n        }\n      }\n    }\n\n    resolveFieldData(value) {\n      let data = this.field ? ObjectUtils.resolveFieldData(value, this.field) : value;\n      return data !== (null || undefined) ? data : '';\n    }\n\n    restoreOverlayAppend() {\n      if (this.overlay && this.appendTo) {\n        this.el.nativeElement.appendChild(this.overlay);\n      }\n    }\n\n    alignOverlay() {\n      if (this.appendTo) DomHandler.absolutePosition(this.overlay, this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement);else DomHandler.relativePosition(this.overlay, this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement);\n    }\n\n    hide() {\n      this.overlayVisible = false;\n      this.cd.markForCheck();\n    }\n\n    handleDropdownClick(event) {\n      if (!this.overlayVisible) {\n        this.focusInput();\n        let queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;\n        if (this.dropdownMode === 'blank') this.search(event, '');else if (this.dropdownMode === 'current') this.search(event, queryValue);\n        this.onDropdownClick.emit({\n          originalEvent: event,\n          query: queryValue\n        });\n      } else {\n        this.hide();\n      }\n    }\n\n    focusInput() {\n      if (this.multiple) this.multiInputEL.nativeElement.focus();else this.inputEL.nativeElement.focus();\n    }\n\n    get emptyMessageLabel() {\n      return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n\n    removeItem(item) {\n      let itemIndex = DomHandler.index(item);\n      let removedValue = this.value[itemIndex];\n      this.value = this.value.filter((val, i) => i != itemIndex);\n      this.onModelChange(this.value);\n      this.updateFilledState();\n      this.onUnselect.emit(removedValue);\n    }\n\n    onKeydown(event) {\n      if (this.overlayVisible) {\n        switch (event.which) {\n          //down\n          case 40:\n            if (this.group) {\n              let highlightItemIndex = this.findOptionGroupIndex(this.highlightOption, this.suggestions);\n\n              if (highlightItemIndex !== -1) {\n                let nextItemIndex = highlightItemIndex.itemIndex + 1;\n\n                if (nextItemIndex < this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex]).length) {\n                  this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex])[nextItemIndex];\n                  this.highlightOptionChanged = true;\n                } else if (this.suggestions[highlightItemIndex.groupIndex + 1]) {\n                  this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex + 1])[0];\n                  this.highlightOptionChanged = true;\n                }\n              } else {\n                this.highlightOption = this.getOptionGroupChildren(this.suggestions[0])[0];\n              }\n            } else {\n              let highlightItemIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n\n              if (highlightItemIndex != -1) {\n                var nextItemIndex = highlightItemIndex + 1;\n\n                if (nextItemIndex != this.suggestions.length) {\n                  this.highlightOption = this.suggestions[nextItemIndex];\n                  this.highlightOptionChanged = true;\n                }\n              } else {\n                this.highlightOption = this.suggestions[0];\n              }\n            }\n\n            event.preventDefault();\n            break;\n          //up\n\n          case 38:\n            if (this.group) {\n              let highlightItemIndex = this.findOptionGroupIndex(this.highlightOption, this.suggestions);\n\n              if (highlightItemIndex !== -1) {\n                let prevItemIndex = highlightItemIndex.itemIndex - 1;\n\n                if (prevItemIndex >= 0) {\n                  this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex])[prevItemIndex];\n                  this.highlightOptionChanged = true;\n                } else if (prevItemIndex < 0) {\n                  let prevGroup = this.suggestions[highlightItemIndex.groupIndex - 1];\n\n                  if (prevGroup) {\n                    this.highlightOption = this.getOptionGroupChildren(prevGroup)[this.getOptionGroupChildren(prevGroup).length - 1];\n                    this.highlightOptionChanged = true;\n                  }\n                }\n              }\n            } else {\n              let highlightItemIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n\n              if (highlightItemIndex > 0) {\n                let prevItemIndex = highlightItemIndex - 1;\n                this.highlightOption = this.suggestions[prevItemIndex];\n                this.highlightOptionChanged = true;\n              }\n            }\n\n            event.preventDefault();\n            break;\n          //enter\n\n          case 13:\n            if (this.highlightOption) {\n              this.selectItem(this.highlightOption);\n              this.hide();\n            }\n\n            event.preventDefault();\n            break;\n          //escape\n\n          case 27:\n            this.hide();\n            event.preventDefault();\n            break;\n          //tab\n\n          case 9:\n            if (this.highlightOption) {\n              this.selectItem(this.highlightOption);\n            }\n\n            this.hide();\n            break;\n        }\n      } else {\n        if (event.which === 40 && this.suggestions) {\n          this.search(event, event.target.value);\n        }\n      }\n\n      if (this.multiple) {\n        switch (event.which) {\n          //backspace\n          case 8:\n            if (this.value && this.value.length && !this.multiInputEL.nativeElement.value) {\n              this.value = [...this.value];\n              const removedValue = this.value.pop();\n              this.onModelChange(this.value);\n              this.updateFilledState();\n              this.onUnselect.emit(removedValue);\n            }\n\n            break;\n        }\n      }\n\n      this.inputKeyDown = true;\n    }\n\n    onKeyup(event) {\n      this.onKeyUp.emit(event);\n    }\n\n    onInputFocus(event) {\n      if (!this.itemClicked && this.completeOnFocus) {\n        let queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;\n        this.search(event, queryValue);\n      }\n\n      this.focus = true;\n      this.onFocus.emit(event);\n      this.itemClicked = false;\n    }\n\n    onInputBlur(event) {\n      this.focus = false;\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n\n    onInputChange(event) {\n      if (this.forceSelection) {\n        let valid = false;\n        let inputValue = event.target.value.trim();\n\n        if (this.suggestions) {\n          for (let suggestion of this.suggestions) {\n            let itemValue = this.field ? ObjectUtils.resolveFieldData(suggestion, this.field) : suggestion;\n\n            if (itemValue && inputValue === itemValue.trim()) {\n              valid = true;\n              this.forceSelectionUpdateModelTimeout = setTimeout(() => {\n                this.selectItem(suggestion, false);\n              }, 250);\n              break;\n            }\n          }\n        }\n\n        if (!valid) {\n          if (this.multiple) {\n            this.multiInputEL.nativeElement.value = '';\n          } else {\n            this.value = null;\n            this.inputEL.nativeElement.value = '';\n          }\n\n          this.onClear.emit(event);\n          this.onModelChange(this.value);\n          this.updateFilledState();\n        }\n      }\n    }\n\n    onInputPaste(event) {\n      this.onKeydown(event);\n    }\n\n    isSelected(val) {\n      let selected = false;\n\n      if (this.value && this.value.length) {\n        for (let i = 0; i < this.value.length; i++) {\n          if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n            selected = true;\n            break;\n          }\n        }\n      }\n\n      return selected;\n    }\n\n    findOptionIndex(option, suggestions) {\n      let index = -1;\n\n      if (suggestions) {\n        for (let i = 0; i < suggestions.length; i++) {\n          if (ObjectUtils.equals(option, suggestions[i])) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n\n    findOptionGroupIndex(val, opts) {\n      let groupIndex, itemIndex;\n\n      if (opts) {\n        for (let i = 0; i < opts.length; i++) {\n          groupIndex = i;\n          itemIndex = this.findOptionIndex(val, this.getOptionGroupChildren(opts[i]));\n\n          if (itemIndex !== -1) {\n            break;\n          }\n        }\n      }\n\n      if (itemIndex !== -1) {\n        return {\n          groupIndex: groupIndex,\n          itemIndex: itemIndex\n        };\n      } else {\n        return -1;\n      }\n    }\n\n    updateFilledState() {\n      if (this.multiple) this.filled = this.value && this.value.length || this.multiInputEL && this.multiInputEL.nativeElement && this.multiInputEL.nativeElement.value != '';else this.filled = this.inputFieldValue && this.inputFieldValue != '' || this.inputEL && this.inputEL.nativeElement && this.inputEL.nativeElement.value != '';\n      ;\n    }\n\n    updateInputField() {\n      let formattedValue = this.resolveFieldData(this.value);\n      this.inputFieldValue = formattedValue;\n\n      if (this.inputEL && this.inputEL.nativeElement) {\n        this.inputEL.nativeElement.value = formattedValue;\n      }\n\n      this.updateFilledState();\n    }\n\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentClickListener = this.renderer.listen(documentTarget, 'click', event => {\n          if (event.which === 3) {\n            return;\n          }\n\n          if (!this.inputClick && !this.isDropdownClick(event)) {\n            this.hide();\n          }\n\n          this.inputClick = false;\n          this.cd.markForCheck();\n        });\n      }\n    }\n\n    isDropdownClick(event) {\n      if (this.dropdown) {\n        let target = event.target;\n        return target === this.dropdownButton.nativeElement || target.parentNode === this.dropdownButton.nativeElement;\n      } else {\n        return false;\n      }\n    }\n\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n\n    bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n\n    onWindowResize() {\n      this.hide();\n    }\n\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerEL.nativeElement, () => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        });\n      }\n\n      this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n\n    onOverlayHide() {\n      this.unbindDocumentClickListener();\n      this.unbindDocumentResizeListener();\n      this.unbindScrollListener();\n      this.overlay = null;\n      this.onHide.emit();\n    }\n\n    ngOnDestroy() {\n      if (this.forceSelectionUpdateModelTimeout) {\n        clearTimeout(this.forceSelectionUpdateModelTimeout);\n        this.forceSelectionUpdateModelTimeout = null;\n      }\n\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n\n      this.restoreOverlayAppend();\n      this.onOverlayHide();\n    }\n\n  }\n\n  AutoComplete.ɵfac = function AutoComplete_Factory(t) {\n    return new (t || AutoComplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PrimeNGConfig));\n  };\n\n  AutoComplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AutoComplete,\n    selectors: [[\"p-autoComplete\"]],\n    contentQueries: function AutoComplete_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function AutoComplete_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n        ɵngcc0.ɵɵviewQuery(_c4, 5);\n        ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerEL = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputEL = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiInputEL = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiContainerEL = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdownButton = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function AutoComplete_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focus && !ctx.disabled || ctx.overlayVisible);\n      }\n    },\n    inputs: {\n      minLength: \"minLength\",\n      delay: \"delay\",\n      type: \"type\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      dropdownIcon: \"dropdownIcon\",\n      unique: \"unique\",\n      completeOnFocus: \"completeOnFocus\",\n      scrollHeight: \"scrollHeight\",\n      dropdownMode: \"dropdownMode\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      autocomplete: \"autocomplete\",\n      suggestions: \"suggestions\",\n      disabled: \"disabled\",\n      style: \"style\",\n      panelStyle: \"panelStyle\",\n      styleClass: \"styleClass\",\n      panelStyleClass: \"panelStyleClass\",\n      inputStyle: \"inputStyle\",\n      inputId: \"inputId\",\n      inputStyleClass: \"inputStyleClass\",\n      placeholder: \"placeholder\",\n      readonly: \"readonly\",\n      virtualScroll: \"virtualScroll\",\n      itemSize: \"itemSize\",\n      maxlength: \"maxlength\",\n      name: \"name\",\n      required: \"required\",\n      size: \"size\",\n      appendTo: \"appendTo\",\n      autoHighlight: \"autoHighlight\",\n      forceSelection: \"forceSelection\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      group: \"group\",\n      field: \"field\",\n      dropdown: \"dropdown\",\n      showEmptyMessage: \"showEmptyMessage\",\n      multiple: \"multiple\",\n      tabindex: \"tabindex\",\n      dataKey: \"dataKey\",\n      emptyMessage: \"emptyMessage\",\n      autofocus: \"autofocus\",\n      optionGroupChildren: \"optionGroupChildren\",\n      optionGroupLabel: \"optionGroupLabel\"\n    },\n    outputs: {\n      completeMethod: \"completeMethod\",\n      onSelect: \"onSelect\",\n      onUnselect: \"onUnselect\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onDropdownClick: \"onDropdownClick\",\n      onClear: \"onClear\",\n      onKeyUp: \"onKeyUp\",\n      onShow: \"onShow\",\n      onHide: \"onHide\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([AUTOCOMPLETE_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 12,\n    consts: [[3, \"ngClass\", \"ngStyle\"], [\"container\", \"\"], [\"class\", \"p-autocomplete-input p-inputtext p-component\", \"aria-autocomplete\", \"list\", \"role\", \"searchbox\", \"aria-haspopup\", \"true\", 3, \"ngStyle\", \"class\", \"autocomplete\", \"ngClass\", \"value\", \"readonly\", \"disabled\", \"click\", \"input\", \"keydown\", \"keyup\", \"focus\", \"blur\", \"change\", \"paste\", 4, \"ngIf\"], [\"class\", \"p-autocomplete-multiple-container p-component p-inputtext\", 3, \"ngClass\", \"click\", 4, \"ngIf\"], [\"class\", \"p-autocomplete-loader pi pi-spinner pi-spin\", 4, \"ngIf\"], [\"type\", \"button\", \"pButton\", \"\", \"class\", \"p-autocomplete-dropdown\", \"pRipple\", \"\", 3, \"icon\", \"disabled\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"max-height\", \"ngStyle\", \"class\", 4, \"ngIf\"], [\"aria-autocomplete\", \"list\", \"role\", \"searchbox\", \"aria-haspopup\", \"true\", 1, \"p-autocomplete-input\", \"p-inputtext\", \"p-component\", 3, \"ngStyle\", \"autocomplete\", \"ngClass\", \"value\", \"readonly\", \"disabled\", \"click\", \"input\", \"keydown\", \"keyup\", \"focus\", \"blur\", \"change\", \"paste\"], [\"in\", \"\"], [1, \"p-autocomplete-multiple-container\", \"p-component\", \"p-inputtext\", 3, \"ngClass\", \"click\"], [\"multiContainer\", \"\"], [\"class\", \"p-autocomplete-token\", 4, \"ngFor\", \"ngForOf\"], [1, \"p-autocomplete-input-token\"], [\"aria-autocomplete\", \"list\", \"role\", \"searchbox\", \"aria-haspopup\", \"true\", 3, \"disabled\", \"readonly\", \"autocomplete\", \"ngStyle\", \"input\", \"click\", \"keydown\", \"keyup\", \"focus\", \"blur\", \"change\", \"paste\"], [\"multiIn\", \"\"], [1, \"p-autocomplete-token\"], [\"token\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"p-autocomplete-token-label\", 4, \"ngIf\"], [\"class\", \"p-autocomplete-token-icon pi pi-times-circle\", 3, \"click\", 4, \"ngIf\"], [1, \"p-autocomplete-token-label\"], [1, \"p-autocomplete-token-icon\", \"pi\", \"pi-times-circle\", 3, \"click\"], [1, \"p-autocomplete-loader\", \"pi\", \"pi-spinner\", \"pi-spin\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", 1, \"p-autocomplete-dropdown\", 3, \"icon\", \"disabled\", \"click\"], [\"ddBtn\", \"\"], [\"panel\", \"\"], [4, \"ngTemplateOutlet\"], [\"role\", \"listbox\", 1, \"p-autocomplete-items\", 3, \"ngClass\"], [4, \"ngIf\"], [\"itemslist\", \"\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"p-autocomplete-item-group\"], [4, \"ngIf\", \"ngIfElse\"], [\"virtualScrollList\", \"\"], [\"class\", \"p-autocomplete-empty-message\", 4, \"ngIf\"], [\"role\", \"option\", \"class\", \"p-autocomplete-item\", \"pRipple\", \"\", 3, \"ngClass\", \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"option\", \"pRipple\", \"\", 1, \"p-autocomplete-item\", 3, \"ngClass\", \"id\", \"click\"], [3, \"ngStyle\", \"itemSize\", 4, \"ngIf\"], [3, \"ngStyle\", \"itemSize\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [\"role\", \"option\", \"pRipple\", \"\", 1, \"p-autocomplete-item\", 3, \"ngClass\", \"ngStyle\", \"id\", \"click\"], [1, \"p-autocomplete-empty-message\"], [\"empty\", \"\"]],\n    template: function AutoComplete_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0, 1);\n        ɵngcc0.ɵɵtemplate(2, AutoComplete_input_2_Template, 2, 26, \"input\", 2);\n        ɵngcc0.ɵɵtemplate(3, AutoComplete_ul_3_Template, 6, 23, \"ul\", 3);\n        ɵngcc0.ɵɵtemplate(4, AutoComplete_i_4_Template, 1, 0, \"i\", 4);\n        ɵngcc0.ɵɵtemplate(5, AutoComplete_button_5_Template, 2, 3, \"button\", 5);\n        ɵngcc0.ɵɵtemplate(6, AutoComplete_div_6_Template, 9, 21, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.styleClass);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(9, _c15, ctx.dropdown, ctx.multiple))(\"ngStyle\", ctx.style);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.multiple);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.multiple);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.loading);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.dropdown);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.overlayVisible);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgStyle, ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc2.NgTemplateOutlet, ɵngcc3.ButtonDirective, ɵngcc4.Ripple, ɵngcc5.CdkVirtualScrollViewport, ɵngcc5.CdkFixedSizeVirtualScroll, ɵngcc5.CdkVirtualForOf],\n    styles: [\".p-autocomplete{display:inline-flex;position:relative}.p-autocomplete-loader{margin-top:-.5rem;position:absolute;top:50%}.p-autocomplete-dd .p-autocomplete-input{flex:1 1 auto;width:1%}.p-autocomplete-dd .p-autocomplete-input,.p-autocomplete-dd .p-autocomplete-multiple-container{border-bottom-right-radius:0;border-top-right-radius:0}.p-autocomplete-dd .p-autocomplete-dropdown{border-bottom-left-radius:0;border-top-left-radius:0}.p-autocomplete .p-autocomplete-panel{min-width:100%}.p-autocomplete-panel{overflow:auto;position:absolute}.p-autocomplete-items{list-style-type:none;margin:0;padding:0}.p-autocomplete-item{cursor:pointer;overflow:hidden;position:relative;white-space:nowrap}.p-autocomplete-multiple-container{align-items:center;cursor:text;display:flex;flex-wrap:wrap;list-style-type:none;margin:0;overflow:hidden;padding:0}.p-autocomplete-token{align-items:center;cursor:default;display:inline-flex;flex:0 0 auto}.p-autocomplete-token-icon{cursor:pointer}.p-autocomplete-input-token{display:inline-flex;flex:1 1 auto}.p-autocomplete-input-token input{background-color:transparent;border:0;border-radius:0;box-shadow:none;margin:0;outline:0 none;padding:0;width:100%}.p-fluid .p-autocomplete{display:flex}.p-fluid .p-autocomplete-dd .p-autocomplete-input{width:1%}\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return AutoComplete;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AutoCompleteModule = /*#__PURE__*/(() => {\n  class AutoCompleteModule {}\n\n  AutoCompleteModule.ɵfac = function AutoCompleteModule_Factory(t) {\n    return new (t || AutoCompleteModule)();\n  };\n\n  AutoCompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AutoCompleteModule\n  });\n  AutoCompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, InputTextModule, ButtonModule, SharedModule, RippleModule, ScrollingModule], SharedModule, ScrollingModule]\n  });\n  return AutoCompleteModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AutoCompleteModule, {\n    declarations: function () {\n      return [AutoComplete];\n    },\n    imports: function () {\n      return [CommonModule, InputTextModule, ButtonModule, SharedModule, RippleModule, ScrollingModule];\n    },\n    exports: function () {\n      return [AutoComplete, SharedModule, ScrollingModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AUTOCOMPLETE_VALUE_ACCESSOR, AutoComplete, AutoCompleteModule }; //# sourceMappingURL=primeng-autocomplete.js.map","map":null,"metadata":{},"sourceType":"module"}