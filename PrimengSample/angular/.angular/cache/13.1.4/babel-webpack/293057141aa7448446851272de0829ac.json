{"ast":null,"code":"import * as i3 from '@abp/ng.theme.shared';\nimport { collapse, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport * as i0 from '@angular/core';\nimport { Injectable, Component, InjectionToken, inject, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { finalize, debounceTime, map } from 'rxjs/operators';\nimport * as i5 from '@abp/ng.core';\nimport { AbstractNavTreeService, RoutesService, noop, ConfigStateService, featuresFactory, CoreModule } from '@abp/ng.core';\nimport * as i4 from '@angular/common';\nimport * as i6 from '@ngx-validate/core';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport { combineLatest } from 'rxjs';\n\nfunction EmailSettingGroupComponent_form_4_button_51_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function EmailSettingGroupComponent_form_4_button_51_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.openSendEmailModal();\n    });\n    i0.ɵɵelement(1, \"i\", 24);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"AbpSettingManagement::SendTestEmail\"), \" \");\n  }\n}\n\nconst _c0 = function () {\n  return {\n    time: \"200ms\",\n    easing: \"linear\"\n  };\n};\n\nconst _c1 = function (a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nfunction EmailSettingGroupComponent_form_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function EmailSettingGroupComponent_form_4_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.submit();\n    });\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵelementStart(2, \"label\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelementStart(7, \"label\", 8);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 7);\n    i0.ɵɵelementStart(12, \"label\", 8);\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"input\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 7);\n    i0.ɵɵelementStart(17, \"label\", 8);\n    i0.ɵɵtext(18);\n    i0.ɵɵpipe(19, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 13);\n    i0.ɵɵelement(22, \"input\", 14);\n    i0.ɵɵelementStart(23, \"label\", 15);\n    i0.ɵɵtext(24);\n    i0.ɵɵpipe(25, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"div\", 13);\n    i0.ɵɵelement(27, \"input\", 16);\n    i0.ɵɵelementStart(28, \"label\", 17);\n    i0.ɵɵtext(29);\n    i0.ɵɵpipe(30, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"div\");\n    i0.ɵɵelementStart(32, \"div\", 7);\n    i0.ɵɵelementStart(33, \"label\", 8);\n    i0.ɵɵtext(34);\n    i0.ɵɵpipe(35, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(36, \"input\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(37, \"div\", 7);\n    i0.ɵɵelementStart(38, \"label\", 8);\n    i0.ɵɵtext(39);\n    i0.ɵɵpipe(40, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(41, \"input\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(42, \"div\", 7);\n    i0.ɵɵelementStart(43, \"label\", 8);\n    i0.ɵɵtext(44);\n    i0.ɵɵpipe(45, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(46, \"input\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(47, \"hr\");\n    i0.ɵɵelementStart(48, \"button\", 21);\n    i0.ɵɵtext(49);\n    i0.ɵɵpipe(50, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(51, EmailSettingGroupComponent_form_4_button_51_Template, 4, 3, \"button\", 22);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_8_0;\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.form)(\"validateOnSubmit\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 14, \"AbpSettingManagement::DefaultFromDisplayName\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 16, \"AbpSettingManagement::DefaultFromAddress\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 18, \"AbpSettingManagement::SmtpHost\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(19, 20, \"AbpSettingManagement::SmtpPort\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(25, 22, \"AbpSettingManagement::SmtpEnableSsl\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(30, 24, \"AbpSettingManagement::SmtpUseDefaultCredentials\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"@collapse\", i0.ɵɵpureFunction2(35, _c1, ((tmp_8_0 = ctx_r0.form.get(\"smtpUseDefaultCredentials\")) == null ? null : tmp_8_0.value) ? \"collapsed\" : \"expanded\", i0.ɵɵpureFunction0(34, _c0)));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(35, 26, \"AbpSettingManagement::SmtpDomain\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(40, 28, \"AbpSettingManagement::SmtpUserName\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(45, 30, \"AbpSettingManagement::SmtpPassword\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(50, 32, \"AbpSettingManagement::Save\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"abpPermission\", ctx_r0.emailingPolicy);\n  }\n}\n\nfunction EmailSettingGroupComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"SendTestEmail\"));\n  }\n}\n\nfunction EmailSettingGroupComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 25);\n    i0.ɵɵlistener(\"ngSubmit\", function EmailSettingGroupComponent_ng_template_8_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.emailTestFormSubmit();\n    });\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵelementStart(2, \"label\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelementStart(7, \"label\", 8);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 7);\n    i0.ɵɵelementStart(12, \"label\", 8);\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"input\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 7);\n    i0.ɵɵelementStart(17, \"label\", 8);\n    i0.ɵɵtext(18);\n    i0.ɵɵpipe(19, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"textarea\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r4.emailTestForm);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 5, \"AbpSettingManagement::SenderEmailAddress\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 7, \"AbpSettingManagement::TargetEmailAddress\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 9, \"AbpSettingManagement::Subject\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(19, 11, \"AbpSettingManagement::Body\"));\n  }\n}\n\nfunction EmailSettingGroupComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"abp-button\", 30);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 31);\n    i0.ɵɵtext(5, \"Close\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r6.emailTestForm.invalid && ctx_r6.emailTestForm.dirty);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, \"AbpTenantManagement::Send\"));\n  }\n}\n\nlet EmailSettingsService = /*#__PURE__*/(() => {\n  class EmailSettingsService {\n    constructor(restService) {\n      this.restService = restService;\n      this.apiName = 'SettingManagement';\n\n      this.get = () => this.restService.request({\n        method: 'GET',\n        url: '/api/setting-management/emailing'\n      }, {\n        apiName: this.apiName\n      });\n\n      this.sendTestEmail = input => this.restService.request({\n        method: 'POST',\n        url: '/api/setting-management/emailing/send-test-email',\n        body: input\n      }, {\n        apiName: this.apiName\n      });\n\n      this.update = input => this.restService.request({\n        method: 'POST',\n        url: '/api/setting-management/emailing',\n        body: input\n      }, {\n        apiName: this.apiName\n      });\n    }\n\n  }\n\n  EmailSettingsService.ɵfac = function EmailSettingsService_Factory(t) {\n    return new (t || EmailSettingsService)(i0.ɵɵinject(i5.RestService));\n  };\n\n  EmailSettingsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: EmailSettingsService,\n    factory: EmailSettingsService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmailSettingsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet EmailSettingGroupComponent = /*#__PURE__*/(() => {\n  class EmailSettingGroupComponent {\n    constructor(emailSettingsService, fb, toasterService) {\n      this.emailSettingsService = emailSettingsService;\n      this.fb = fb;\n      this.toasterService = toasterService;\n      this.saving = false;\n      this.emailingPolicy = \"SettingManagement.Emailing\"\n      /* Emailing */\n      ;\n      this.isEmailTestModalOpen = false;\n      this.modalSize = {\n        size: \"lg\"\n      };\n    }\n\n    ngOnInit() {\n      this.getData();\n    }\n\n    getData() {\n      this.emailSettingsService.get().subscribe(res => {\n        this.buildForm(res);\n      });\n    }\n\n    buildForm(emailSettings) {\n      this.form = this.fb.group({\n        defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],\n        defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],\n        smtpHost: [emailSettings.smtpHost],\n        smtpPort: [emailSettings.smtpPort, [Validators.required]],\n        smtpEnableSsl: [emailSettings.smtpEnableSsl],\n        smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],\n        smtpDomain: [emailSettings.smtpDomain],\n        smtpUserName: [emailSettings.smtpUserName],\n        smtpPassword: [emailSettings.smtpPassword]\n      });\n    }\n\n    submit() {\n      if (this.saving || this.form.invalid) return;\n      this.saving = true;\n      this.emailSettingsService.update(this.form.value).pipe(finalize(() => this.saving = false)).subscribe(() => {\n        this.toasterService.success('AbpSettingManagement::SuccessfullySaved');\n        this.getData();\n      });\n    }\n\n    openSendEmailModal() {\n      this.buildEmailTestForm();\n      this.isEmailTestModalOpen = true;\n    }\n\n    buildEmailTestForm() {\n      this.emailTestForm = this.fb.group({\n        senderEmailAddress: ['', [Validators.required, Validators.email]],\n        targetEmailAddress: ['', [Validators.required, Validators.email]],\n        subject: ['', [Validators.required]],\n        body: ['']\n      });\n    }\n\n    emailTestFormSubmit() {\n      if (this.emailTestForm.invalid) {\n        return;\n      }\n\n      this.emailSettingsService.sendTestEmail(this.emailTestForm.value).subscribe(res => {\n        this.toasterService.success('AbpSettingManagement::SuccessfullySent');\n        this.isEmailTestModalOpen = false;\n      });\n    }\n\n  }\n\n  EmailSettingGroupComponent.ɵfac = function EmailSettingGroupComponent_Factory(t) {\n    return new (t || EmailSettingGroupComponent)(i0.ɵɵdirectiveInject(EmailSettingsService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ToasterService));\n  };\n\n  EmailSettingGroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: EmailSettingGroupComponent,\n    selectors: [[\"abp-email-setting-group\"]],\n    decls: 12,\n    vars: 6,\n    consts: [[1, \"my-3\"], [3, \"formGroup\", \"validateOnSubmit\", \"ngSubmit\", 4, \"ngIf\"], [3, \"visible\", \"options\", \"visibleChange\"], [\"abpHeader\", \"\"], [\"abpBody\", \"\"], [\"abpFooter\", \"\"], [3, \"formGroup\", \"validateOnSubmit\", \"ngSubmit\"], [1, \"mb-3\", \"form-group\"], [1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"defaultFromDisplayName\", 1, \"form-control\"], [\"type\", \"text\", \"formControlName\", \"defaultFromAddress\", 1, \"form-control\"], [\"type\", \"text\", \"formControlName\", \"smtpHost\", 1, \"form-control\"], [\"type\", \"number\", \"formControlName\", \"smtpPort\", 1, \"form-control\"], [1, \"form-check\", \"mb-2\"], [\"type\", \"checkbox\", \"id\", \"smtp-enable-ssl\", \"formControlName\", \"smtpEnableSsl\", 1, \"form-check-input\"], [\"for\", \"smtp-enable-ssl\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"smtp-use-default-credentials\", \"formControlName\", \"smtpUseDefaultCredentials\", 1, \"form-check-input\"], [\"for\", \"smtp-use-default-credentials\", 1, \"form-check-label\"], [\"type\", \"text\", \"formControlName\", \"smtpDomain\", 1, \"form-control\"], [\"type\", \"text\", \"formControlName\", \"smtpUserName\", 1, \"form-control\"], [\"type\", \"password\", \"formControlName\", \"smtpPassword\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"type\", \"button\", \"class\", \"btn btn-primary mx-2\", 3, \"click\", 4, \"abpPermission\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"mx-2\", 3, \"click\"], [1, \"fa\", \"f-send\"], [\"id\", \"emailTestForm\", 3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"senderEmailAddress\", 1, \"form-control\"], [\"formControlName\", \"targetEmailAddress\", 1, \"form-control\"], [\"formControlName\", \"subject\", 1, \"form-control\"], [\"formControlName\", \"body\", 1, \"form-control\"], [\"buttonType\", \"submit\", \"iconClass\", \"fa fa-send\", \"formName\", \"emailTestForm\", 3, \"disabled\"], [\"type\", \"button\", \"abpClose\", \"\", 1, \"btn\", \"btn-secondary\"]],\n    template: function EmailSettingGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1);\n        i0.ɵɵpipe(2, \"abpLocalization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\", 0);\n        i0.ɵɵtemplate(4, EmailSettingGroupComponent_form_4_Template, 52, 38, \"form\", 1);\n        i0.ɵɵelementStart(5, \"abp-modal\", 2);\n        i0.ɵɵlistener(\"visibleChange\", function EmailSettingGroupComponent_Template_abp_modal_visibleChange_5_listener($event) {\n          return ctx.isEmailTestModalOpen = $event;\n        });\n        i0.ɵɵtemplate(6, EmailSettingGroupComponent_ng_template_6_Template, 3, 3, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(8, EmailSettingGroupComponent_ng_template_8_Template, 21, 13, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(10, EmailSettingGroupComponent_ng_template_10_Template, 6, 4, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 4, \"AbpSettingManagement::Menu:Emailing\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"visible\", ctx.isEmailTestModalOpen)(\"options\", ctx.modalSize);\n      }\n    },\n    directives: [i3.ModalComponent, i3.ButtonComponent, i4.NgIf, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i5.FormSubmitDirective, i2.FormGroupDirective, i6.ValidationGroupDirective, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i6.ValidationDirective, i2.NumberValueAccessor, i2.CheckboxControlValueAccessor, i5.PermissionDirective, i3.ModalCloseDirective],\n    pipes: [i5.LocalizationPipe],\n    encapsulation: 2,\n    data: {\n      animation: [collapse]\n    }\n  });\n  return EmailSettingGroupComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SettingTabsService = /*#__PURE__*/(() => {\n  class SettingTabsService extends AbstractNavTreeService {}\n\n  SettingTabsService.ɵfac = /* @__PURE__ */function () {\n    let ɵSettingTabsService_BaseFactory;\n    return function SettingTabsService_Factory(t) {\n      return (ɵSettingTabsService_BaseFactory || (ɵSettingTabsService_BaseFactory = i0.ɵɵgetInheritedFactory(SettingTabsService)))(t || SettingTabsService);\n    };\n  }();\n\n  SettingTabsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SettingTabsService,\n    factory: SettingTabsService.ɵfac,\n    providedIn: 'root'\n  });\n  return SettingTabsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction configureRoutes(routesService) {\n  return () => {\n    routesService.add([{\n      name: \"AbpSettingManagement::Settings\"\n      /* Settings */\n      ,\n      path: '/setting-management',\n      parentName: \"AbpUiNavigation::Menu:Administration\"\n      /* Administration */\n      ,\n      layout: \"application\"\n      /* application */\n      ,\n      order: 100,\n      iconClass: 'fa fa-cog'\n    }]);\n  };\n}\n\nconst SETTING_MANAGEMENT_HAS_SETTING = new InjectionToken('SETTING_MANAGEMENT_HAS_SETTING', {\n  factory: () => {\n    const settingTabsService = inject(SettingTabsService);\n    return settingTabsService.visible$.pipe(debounceTime(0), map(nodes => !!nodes.length));\n  }\n});\nconst SETTING_MANAGEMENT_ROUTE_PROVIDERS = [{\n  provide: APP_INITIALIZER,\n  useFactory: configureRoutes,\n  deps: [RoutesService],\n  multi: true\n}, {\n  provide: APP_INITIALIZER,\n  useFactory: noop,\n  deps: [SETTING_MANAGEMENT_HAS_SETTING],\n  multi: true\n}];\nconst SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [{\n  provide: APP_INITIALIZER,\n  useFactory: configureSettingTabs,\n  deps: [SettingTabsService],\n  multi: true\n}];\n\nfunction configureSettingTabs(settingTabs) {\n  return () => {\n    settingTabs.add([{\n      name: \"AbpSettingManagement::Menu:Emailing\"\n      /* EmailSettingGroup */\n      ,\n      order: 100,\n      requiredPolicy: 'SettingManagement.Emailing',\n      component: EmailSettingGroupComponent\n    }]);\n  };\n}\n\nconst SETTING_MANAGEMENT_FEATURES = new InjectionToken('SETTING_MANAGEMENT_FEATURES', {\n  providedIn: 'root',\n  factory: () => {\n    const configState = inject(ConfigStateService);\n    const featureKey = 'SettingManagement.Enable';\n\n    const mapFn = features => ({\n      enable: features[featureKey].toLowerCase() !== 'false'\n    });\n\n    return featuresFactory(configState, [featureKey], mapFn);\n  }\n});\nconst SETTING_MANAGEMENT_ROUTE_VISIBILITY = new InjectionToken('SETTING_MANAGEMENT_ROUTE_VISIBILITY', {\n  providedIn: 'root',\n  factory: () => {\n    const stream = inject(SETTING_MANAGEMENT_FEATURES);\n    return stream.pipe(map(features => features.enable));\n  }\n});\nconst SETTING_MANAGEMENT_FEATURES_PROVIDERS = [{\n  provide: APP_INITIALIZER,\n  useFactory: noop,\n  deps: [SETTING_MANAGEMENT_ROUTE_VISIBILITY],\n  multi: true\n}];\nconst SETTING_MANAGEMENT_VISIBLE_PROVIDERS = [{\n  provide: APP_INITIALIZER,\n  useFactory: setSettingManagementVisibility,\n  deps: [Injector],\n  multi: true\n}];\n\nfunction setSettingManagementVisibility(injector) {\n  return () => {\n    const settingManagementHasSetting$ = injector.get(SETTING_MANAGEMENT_HAS_SETTING);\n    const isSettingManagementFeatureEnable$ = injector.get(SETTING_MANAGEMENT_ROUTE_VISIBILITY);\n    const routes = injector.get(RoutesService);\n    combineLatest([settingManagementHasSetting$, isSettingManagementFeatureEnable$]).subscribe(([settingManagementHasSetting, isSettingManagementFeatureEnable]) => {\n      routes.patch(\"AbpSettingManagement::Settings\"\n      /* Settings */\n      , {\n        invisible: !(settingManagementHasSetting && isSettingManagementFeatureEnable)\n      });\n    });\n  };\n}\n\nlet SettingManagementConfigModule = /*#__PURE__*/(() => {\n  class SettingManagementConfigModule {\n    static forRoot() {\n      return {\n        ngModule: SettingManagementConfigModule,\n        providers: [SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS, SETTING_MANAGEMENT_FEATURES_PROVIDERS, SETTING_MANAGEMENT_VISIBLE_PROVIDERS]\n      };\n    }\n\n  }\n\n  SettingManagementConfigModule.ɵfac = function SettingManagementConfigModule_Factory(t) {\n    return new (t || SettingManagementConfigModule)();\n  };\n\n  SettingManagementConfigModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SettingManagementConfigModule\n  });\n  SettingManagementConfigModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CoreModule, ThemeSharedModule, NgxValidateCoreModule]]\n  });\n  return SettingManagementConfigModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { EmailSettingGroupComponent, EmailSettingsService, SETTING_MANAGEMENT_HAS_SETTING, SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS, SETTING_MANAGEMENT_VISIBLE_PROVIDERS, SettingManagementConfigModule, SettingTabsService, configureRoutes, configureSettingTabs, setSettingManagementVisibility }; //# sourceMappingURL=abp-ng.setting-management-config.mjs.map","map":null,"metadata":{},"sourceType":"module"}