{"ast":null,"code":"import * as i1 from '@abp/ng.core';\nimport { ListService, LocalizationService, escapeHtmlChars, ConfigStateService, RouterOutletComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';\nimport * as i2 from '@abp/ng.theme.shared';\nimport { Confirmation, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport * as i4 from '@abp/ng.theme.shared/extensions';\nimport { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, UiExtensionsModule } from '@abp/ng.theme.shared/extensions';\nimport * as i0 from '@angular/core';\nimport { Component, ViewChild, InjectionToken, Injectable, NgModule } from '@angular/core';\nimport { finalize, tap, switchMap, map, mapTo } from 'rxjs/operators';\nimport * as i3 from '@abp/ng.identity/proxy';\nimport * as i5 from '@abp/ng.permission-management';\nimport { PermissionManagementModule } from '@abp/ng.permission-management';\nimport * as i4$1 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i9 from '@ngx-validate/core';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport * as i6 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbNavModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport * as i8 from '@angular/common';\nimport { of } from 'rxjs';\nimport * as i1$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\n\nfunction RolesComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, (ctx_r1.selected == null ? null : ctx_r1.selected.id) ? \"AbpIdentity::Edit\" : \"AbpIdentity::NewRole\"));\n  }\n}\n\nfunction RolesComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 14);\n    i0.ɵɵlistener(\"ngSubmit\", function RolesComponent_ng_template_14_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.save();\n    });\n    i0.ɵɵelement(1, \"abp-extensible-form\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r3.form);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"selectedRecord\", ctx_r3.selected);\n  }\n}\n\nfunction RolesComponent_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"abp-button\", 17);\n    i0.ɵɵlistener(\"click\", function RolesComponent_ng_template_16_Template_abp_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.save();\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 3, \"AbpIdentity::Cancel\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r5.form == null ? null : ctx_r5.form.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 5, \"AbpIdentity::Save\"));\n  }\n}\n\nfunction RolesComponent_abp_permission_management_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"abp-permission-management\", 18, 19);\n    i0.ɵɵlistener(\"abpInit\", function RolesComponent_abp_permission_management_18_Template_abp_permission_management_abpInit_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const init_r11 = restoredCtx.initTemplate;\n\n      const _r12 = i0.ɵɵreference(1);\n\n      return init_r11(_r12);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return {\n    value: \"R\"\n  };\n};\n\nconst _c1 = function (a0) {\n  return {\n    value: a0\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    value: a0,\n    twoWay: true\n  };\n};\n\nconst _c3 = function () {\n  return {\n    value: true\n  };\n};\n\nconst _c4 = function (a0, a1, a2, a3) {\n  return {\n    providerName: a0,\n    providerKey: a1,\n    visible: a2,\n    hideBadges: a3\n  };\n};\n\nconst _c5 = function (a0) {\n  return {\n    visibleChange: a0\n  };\n};\n\nconst _c6 = function (a0, a1, a2) {\n  return {\n    inputs: a0,\n    outputs: a1,\n    componentKey: a2\n  };\n};\n\nconst _c7 = [\"modalContent\"];\n\nfunction UsersComponent_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, (ctx_r1.selected == null ? null : ctx_r1.selected.id) ? \"AbpIdentity::Edit\" : \"AbpIdentity::NewUser\"));\n  }\n}\n\nfunction UsersComponent_ng_template_18_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelement(1, \"i\", 20);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UsersComponent_ng_template_18_form_2_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"abp-extensible-form\", 28);\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"selectedRecord\", ctx_r11.selected);\n  }\n}\n\nfunction UsersComponent_ng_template_18_form_2_ng_template_12_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵelement(1, \"input\", 31);\n    i0.ɵɵelementStart(2, \"label\", 32);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const roleGroup_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    const ctx_r13 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", roleGroup_r14.controls[ctx_r13.roles[i_r15].name]);\n    i0.ɵɵattribute(\"id\", \"roles-\" + i_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", \"roles-\" + i_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r13.roles[i_r15].name);\n  }\n}\n\nfunction UsersComponent_ng_template_18_form_2_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UsersComponent_ng_template_18_form_2_ng_template_12_div_0_Template, 4, 4, \"div\", 29);\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r12.roleGroups)(\"ngForTrackBy\", ctx_r12.trackByFn);\n  }\n}\n\nfunction UsersComponent_ng_template_18_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 21);\n    i0.ɵɵlistener(\"ngSubmit\", function UsersComponent_ng_template_18_form_2_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.save();\n    });\n    i0.ɵɵelementStart(1, \"ul\", 22, 23);\n    i0.ɵɵelementStart(3, \"li\", 24);\n    i0.ɵɵelementStart(4, \"a\", 25);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, UsersComponent_ng_template_18_form_2_ng_template_7_Template, 1, 1, \"ng-template\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\", 24);\n    i0.ɵɵelementStart(9, \"a\", 25);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, UsersComponent_ng_template_18_form_2_ng_template_12_Template, 1, 2, \"ng-template\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"div\", 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r10 = i0.ɵɵreference(2);\n\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r9.form);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 4, \"AbpIdentity::UserInformations\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 6, \"AbpIdentity::Roles\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngbNavOutlet\", _r10);\n  }\n}\n\nfunction UsersComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UsersComponent_ng_template_18_ng_template_0_Template, 2, 0, \"ng-template\", null, 17, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(2, UsersComponent_ng_template_18_form_2_Template, 14, 8, \"form\", 18);\n  }\n\n  if (rf & 2) {\n    const _r7 = i0.ɵɵreference(1);\n\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.form)(\"ngIfElse\", _r7);\n  }\n}\n\nfunction UsersComponent_ng_template_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"abp-button\", 34);\n    i0.ɵɵlistener(\"click\", function UsersComponent_ng_template_20_Template_abp_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.save();\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"abpLocalization\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 3, \"AbpIdentity::Cancel\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r5.form == null ? null : ctx_r5.form.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 5, \"AbpIdentity::Save\"));\n  }\n}\n\nfunction UsersComponent_abp_permission_management_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"abp-permission-management\", 35, 36);\n    i0.ɵɵlistener(\"abpInit\", function UsersComponent_abp_permission_management_22_Template_abp_permission_management_abpInit_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const init_r20 = restoredCtx.initTemplate;\n\n      const _r21 = i0.ɵɵreference(1);\n\n      return init_r20(_r21);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"entityDisplayName\", ctx_r6.entityDisplayName);\n  }\n}\n\nconst _c8 = function () {\n  return {\n    value: \"U\"\n  };\n};\n\nconst _c9 = function (a0, a1, a2) {\n  return {\n    providerName: a0,\n    providerKey: a1,\n    visible: a2\n  };\n};\n\nlet RolesComponent = /*#__PURE__*/(() => {\n  class RolesComponent {\n    constructor(list, confirmationService, toasterService, injector, service) {\n      this.list = list;\n      this.confirmationService = confirmationService;\n      this.toasterService = toasterService;\n      this.injector = injector;\n      this.service = service;\n      this.data = {\n        items: [],\n        totalCount: 0\n      };\n      this.visiblePermissions = false;\n      this.modalBusy = false;\n      this.permissionManagementKey = \"PermissionManagement.PermissionManagementComponent\"\n      /* PermissionManagement */\n      ;\n\n      this.onVisiblePermissionChange = event => {\n        this.visiblePermissions = event;\n      };\n    }\n\n    ngOnInit() {\n      this.hookToQuery();\n    }\n\n    buildForm() {\n      const data = new FormPropData(this.injector, this.selected);\n      this.form = generateFormFromProps(data);\n    }\n\n    openModal() {\n      this.buildForm();\n      this.isModalVisible = true;\n    }\n\n    add() {\n      this.selected = {};\n      this.openModal();\n    }\n\n    edit(id) {\n      this.service.get(id).subscribe(res => {\n        this.selected = res;\n        this.openModal();\n      });\n    }\n\n    save() {\n      if (!this.form.valid) return;\n      this.modalBusy = true;\n      const {\n        id\n      } = this.selected;\n      (id ? this.service.update(id, Object.assign(Object.assign({}, this.selected), this.form.value)) : this.service.create(this.form.value)).pipe(finalize(() => this.modalBusy = false)).subscribe(() => {\n        this.isModalVisible = false;\n        this.list.get();\n      });\n    }\n\n    delete(id, name) {\n      this.confirmationService.warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\n        messageLocalizationParams: [name]\n      }).subscribe(status => {\n        if (status === Confirmation.Status.confirm) {\n          this.toasterService.success('AbpUi::SuccessfullyDeleted');\n          this.service.delete(id).subscribe(() => this.list.get());\n        }\n      });\n    }\n\n    hookToQuery() {\n      this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => this.data = res);\n    }\n\n    openPermissionsModal(providerKey) {\n      this.providerKey = providerKey;\n      setTimeout(() => {\n        this.visiblePermissions = true;\n      }, 0);\n    }\n\n    sort(data) {\n      const {\n        prop,\n        dir\n      } = data.sorts[0];\n      this.list.sortKey = prop;\n      this.list.sortOrder = dir;\n    }\n\n  }\n\n  RolesComponent.ɵfac = function RolesComponent_Factory(t) {\n    return new (t || RolesComponent)(i0.ɵɵdirectiveInject(i1.ListService), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i2.ToasterService), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i3.IdentityRoleService));\n  };\n\n  RolesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RolesComponent,\n    selectors: [[\"abp-roles\"]],\n    features: [i0.ɵɵProvidersFeature([ListService, {\n      provide: EXTENSIONS_IDENTIFIER,\n      useValue: \"Identity.RolesComponent\"\n      /* Roles */\n\n    }])],\n    decls: 19,\n    vars: 27,\n    consts: [[\"id\", \"identity-roles-wrapper\", 1, \"card\"], [1, \"card-header\"], [1, \"row\"], [1, \"col\", \"col-md-6\"], [1, \"card-title\"], [1, \"text-end\", \"col\", \"col-md-6\"], [3, \"record\"], [1, \"card-body\"], [3, \"data\", \"recordsTotal\", \"list\"], [3, \"visible\", \"busy\", \"visibleChange\"], [\"abpHeader\", \"\"], [\"abpBody\", \"\"], [\"abpFooter\", \"\"], [3, \"abpInit\", 4, \"abpReplaceableTemplate\"], [\"validateOnSubmit\", \"\", 3, \"formGroup\", \"ngSubmit\"], [3, \"selectedRecord\"], [\"type\", \"button\", \"abpClose\", \"\", 1, \"btn\", \"btn-secondary\"], [\"iconClass\", \"fa fa-check\", 3, \"disabled\", \"click\"], [3, \"abpInit\"], [\"abpPermissionManagement\", \"abpPermissionManagement\"]],\n    template: function RolesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h5\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"abpLocalization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelement(8, \"abp-page-toolbar\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelement(10, \"abp-extensible-table\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"abp-modal\", 9);\n        i0.ɵɵlistener(\"visibleChange\", function RolesComponent_Template_abp_modal_visibleChange_11_listener($event) {\n          return ctx.isModalVisible = $event;\n        });\n        i0.ɵɵtemplate(12, RolesComponent_ng_template_12_Template, 3, 3, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(14, RolesComponent_ng_template_14_Template, 2, 2, \"ng-template\", null, 11, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(16, RolesComponent_ng_template_16_Template, 6, 7, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, RolesComponent_abp_permission_management_18_Template, 2, 0, \"abp-permission-management\", 13);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 8, \"AbpIdentity::Roles\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"record\", ctx.data.items);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"data\", ctx.data.items)(\"recordsTotal\", ctx.data.totalCount)(\"list\", ctx.list);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"visible\", ctx.isModalVisible)(\"busy\", ctx.modalBusy);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"abpReplaceableTemplate\", i0.ɵɵpureFunction3(23, _c6, i0.ɵɵpureFunction4(16, _c4, i0.ɵɵpureFunction0(10, _c0), i0.ɵɵpureFunction1(11, _c1, ctx.providerKey), i0.ɵɵpureFunction1(13, _c2, ctx.visiblePermissions), i0.ɵɵpureFunction0(15, _c3)), i0.ɵɵpureFunction1(21, _c5, ctx.onVisiblePermissionChange), ctx.permissionManagementKey));\n      }\n    },\n    directives: [i4.PageToolbarComponent, i4.ExtensibleTableComponent, i2.ModalComponent, i4.ExtensibleFormComponent, i2.ButtonComponent, i5.PermissionManagementComponent, i4$1.ɵNgNoValidate, i4$1.NgControlStatusGroup, i1.FormSubmitDirective, i4$1.FormGroupDirective, i9.ValidationGroupDirective, i2.ModalCloseDirective, i1.ReplaceableTemplateDirective, i1.InitDirective],\n    pipes: [i1.LocalizationPipe],\n    encapsulation: 2\n  });\n  return RolesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet UsersComponent = /*#__PURE__*/(() => {\n  class UsersComponent {\n    constructor(list, confirmationService, service, toasterService, fb, injector) {\n      this.list = list;\n      this.confirmationService = confirmationService;\n      this.service = service;\n      this.toasterService = toasterService;\n      this.fb = fb;\n      this.injector = injector;\n      this.data = {\n        items: [],\n        totalCount: 0\n      };\n      this.visiblePermissions = false;\n      this.modalBusy = false;\n      this.permissionManagementKey = \"PermissionManagement.PermissionManagementComponent\"\n      /* PermissionManagement */\n      ;\n\n      this.trackByFn = (index, item) => Object.keys(item)[0] || index;\n\n      this.onVisiblePermissionChange = event => {\n        this.visiblePermissions = event;\n      };\n    }\n\n    get roleGroups() {\n      var _a;\n\n      return ((_a = this.form.get('roleNames')) === null || _a === void 0 ? void 0 : _a.controls) || [];\n    }\n\n    ngOnInit() {\n      this.hookToQuery();\n    }\n\n    buildForm() {\n      const data = new FormPropData(this.injector, this.selected);\n      this.form = generateFormFromProps(data);\n      this.service.getAssignableRoles().subscribe(({\n        items\n      }) => {\n        this.roles = items;\n        this.form.addControl('roleNames', this.fb.array(this.roles.map(role => {\n          var _a;\n\n          return this.fb.group({\n            [role.name]: [this.selected.id ? !!((_a = this.selectedUserRoles) === null || _a === void 0 ? void 0 : _a.find(userRole => userRole.id === role.id)) : role.isDefault]\n          });\n        })));\n      });\n    }\n\n    openModal() {\n      this.buildForm();\n      this.isModalVisible = true;\n    }\n\n    add() {\n      this.selected = {};\n      this.selectedUserRoles = [];\n      this.openModal();\n    }\n\n    edit(id) {\n      this.service.get(id).pipe(tap(user => this.selected = user), switchMap(() => this.service.getRoles(id))).subscribe(userRole => {\n        this.selectedUserRoles = userRole.items || [];\n        this.openModal();\n      });\n    }\n\n    save() {\n      if (!this.form.valid || this.modalBusy) return;\n      this.modalBusy = true;\n      const {\n        roleNames = []\n      } = this.form.value;\n      const mappedRoleNames = roleNames.filter(role => !!role[Object.keys(role)[0]]).map(role => Object.keys(role)[0]) || [];\n      const {\n        id\n      } = this.selected;\n      (id ? this.service.update(id, Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), {\n        roleNames: mappedRoleNames\n      })) : this.service.create(Object.assign(Object.assign({}, this.form.value), {\n        roleNames: mappedRoleNames\n      }))).pipe(finalize(() => this.modalBusy = false)).subscribe(() => {\n        this.isModalVisible = false;\n        this.list.get();\n      });\n    }\n\n    delete(id, userName) {\n      this.confirmationService.warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\n        messageLocalizationParams: [userName]\n      }).subscribe(status => {\n        if (status === Confirmation.Status.confirm) {\n          this.service.delete(id).subscribe(() => {\n            this.toasterService.success('AbpUi::SuccessfullyDeleted');\n            this.list.get();\n          });\n        }\n      });\n    }\n\n    sort(data) {\n      const {\n        prop,\n        dir\n      } = data.sorts[0];\n      this.list.sortKey = prop;\n      this.list.sortOrder = dir;\n    }\n\n    hookToQuery() {\n      this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => this.data = res);\n    }\n\n    openPermissionsModal(providerKey, entityDisplayName) {\n      this.providerKey = providerKey;\n      this.entityDisplayName = entityDisplayName;\n      setTimeout(() => {\n        this.visiblePermissions = true;\n      }, 0);\n    }\n\n  }\n\n  UsersComponent.ɵfac = function UsersComponent_Factory(t) {\n    return new (t || UsersComponent)(i0.ɵɵdirectiveInject(i1.ListService), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.IdentityUserService), i0.ɵɵdirectiveInject(i2.ToasterService), i0.ɵɵdirectiveInject(i4$1.FormBuilder), i0.ɵɵdirectiveInject(i0.Injector));\n  };\n\n  UsersComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UsersComponent,\n    selectors: [[\"abp-users\"]],\n    viewQuery: function UsersComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c7, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalContent = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([ListService, {\n      provide: EXTENSIONS_IDENTIFIER,\n      useValue: \"Identity.UsersComponent\"\n      /* Users */\n\n    }])],\n    decls: 23,\n    vars: 29,\n    consts: [[\"id\", \"identity-roles-wrapper\", 1, \"card\"], [1, \"card-header\"], [1, \"row\"], [1, \"col\", \"col-md-6\"], [1, \"card-title\"], [1, \"text-end\", \"col\", \"col-md-6\"], [3, \"record\"], [1, \"card-body\"], [\"id\", \"data-tables-table-filter\", 1, \"data-tables-filter\"], [1, \"input-group\"], [\"type\", \"search\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [3, \"data\", \"recordsTotal\", \"list\"], [3, \"visible\", \"busy\", \"visibleChange\"], [\"abpHeader\", \"\"], [\"abpBody\", \"\"], [\"abpFooter\", \"\"], [3, \"entityDisplayName\", \"abpInit\", 4, \"abpReplaceableTemplate\"], [\"loaderRef\", \"\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\", \"ngIfElse\"], [1, \"text-center\"], [1, \"fa\", \"fa-pulse\", \"fa-spinner\"], [3, \"formGroup\", \"ngSubmit\"], [\"ngbNav\", \"\", 1, \"nav-tabs\"], [\"nav\", \"ngbNav\"], [\"ngbNavItem\", \"\"], [\"ngbNavLink\", \"\"], [\"ngbNavContent\", \"\"], [1, \"mt-2\", \"fade-in-top\", 3, \"ngbNavOutlet\"], [3, \"selectedRecord\"], [\"class\", \"form-check mb-2\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"form-check\", \"mb-2\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"formControl\"], [1, \"form-check-label\"], [\"type\", \"button\", \"abpClose\", \"\", 1, \"btn\", \"btn-secondary\"], [\"iconClass\", \"fa fa-check\", 3, \"disabled\", \"click\"], [3, \"entityDisplayName\", \"abpInit\"], [\"abpPermissionManagement\", \"abpPermissionManagement\"]],\n    template: function UsersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h5\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"abpLocalization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelement(8, \"abp-page-toolbar\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵelementStart(12, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function UsersComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.list.filter = $event;\n        });\n        i0.ɵɵpipe(13, \"abpLocalization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"abp-extensible-table\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"abp-modal\", 12);\n        i0.ɵɵlistener(\"visibleChange\", function UsersComponent_Template_abp_modal_visibleChange_15_listener($event) {\n          return ctx.isModalVisible = $event;\n        });\n        i0.ɵɵtemplate(16, UsersComponent_ng_template_16_Template, 3, 3, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(18, UsersComponent_ng_template_18_Template, 3, 2, \"ng-template\", null, 14, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(20, UsersComponent_ng_template_20_Template, 6, 7, \"ng-template\", null, 15, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, UsersComponent_abp_permission_management_22_Template, 2, 1, \"abp-permission-management\", 16);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 10, \"AbpIdentity::Users\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"record\", ctx.data.items);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(13, 12, \"AbpUi::PagerSearch\"))(\"ngModel\", ctx.list.filter);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"data\", ctx.data.items)(\"recordsTotal\", ctx.data.totalCount)(\"list\", ctx.list);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"visible\", ctx.isModalVisible)(\"busy\", ctx.modalBusy);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"abpReplaceableTemplate\", i0.ɵɵpureFunction3(25, _c6, i0.ɵɵpureFunction3(19, _c9, i0.ɵɵpureFunction0(14, _c8), i0.ɵɵpureFunction1(15, _c1, ctx.providerKey), i0.ɵɵpureFunction1(17, _c2, ctx.visiblePermissions)), i0.ɵɵpureFunction1(23, _c5, ctx.onVisiblePermissionChange), ctx.permissionManagementKey));\n      }\n    },\n    directives: [i4.PageToolbarComponent, i4.ExtensibleTableComponent, i2.ModalComponent, i4.ExtensibleFormComponent, i6.NgbNavOutlet, i2.ButtonComponent, i5.PermissionManagementComponent, i4$1.DefaultValueAccessor, i4$1.NgControlStatus, i4$1.NgModel, i8.NgIf, i4$1.ɵNgNoValidate, i4$1.NgControlStatusGroup, i1.FormSubmitDirective, i4$1.FormGroupDirective, i9.ValidationGroupDirective, i6.NgbNav, i6.NgbNavItem, i6.NgbNavLink, i6.NgbNavContent, i8.NgForOf, i4$1.CheckboxControlValueAccessor, i4$1.FormControlDirective, i9.ValidationDirective, i2.ModalCloseDirective, i1.ReplaceableTemplateDirective, i1.InitDirective],\n    pipes: [i1.LocalizationPipe],\n    encapsulation: 2\n  });\n  return UsersComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DEFAULT_ROLES_ENTITY_ACTIONS = EntityAction.createMany([{\n  text: 'AbpIdentity::Edit',\n  action: data => {\n    const component = data.getInjected(RolesComponent);\n    component.edit(data.record.id);\n  },\n  permission: 'AbpIdentity.Roles.Update'\n}, {\n  text: 'AbpIdentity::Permissions',\n  action: data => {\n    const component = data.getInjected(RolesComponent);\n    component.openPermissionsModal(data.record.name);\n  },\n  permission: 'AbpIdentity.Roles.ManagePermissions'\n}, {\n  text: 'AbpIdentity::Delete',\n  action: data => {\n    const component = data.getInjected(RolesComponent);\n    component.delete(data.record.id, data.record.name);\n  },\n  permission: 'AbpIdentity.Roles.Delete',\n  visible: data => !data.record.isStatic\n}]);\nconst DEFAULT_ROLES_ENTITY_PROPS = EntityProp.createMany([{\n  type: \"string\"\n  /* String */\n  ,\n  name: 'name',\n  displayName: 'AbpIdentity::RoleName',\n  sortable: true,\n  valueResolver: data => {\n    const l10n = data.getInjected(LocalizationService);\n    const t = l10n.instant.bind(l10n);\n    const {\n      isDefault,\n      isPublic,\n      name\n    } = data.record;\n    return of(escapeHtmlChars(name) + (isDefault ? `<span class=\"badge rounded-pill bg-success ms-1\">${t('AbpIdentity::DisplayName:IsDefault')}</span>` : '') + (isPublic ? `<span class=\"badge rounded-pill bg-info ms-1\">${t('AbpIdentity::DisplayName:IsPublic')}</span>` : ''));\n  }\n}]);\nconst DEFAULT_ROLES_CREATE_FORM_PROPS = FormProp.createMany([{\n  type: \"string\"\n  /* String */\n  ,\n  name: 'name',\n  displayName: 'AbpIdentity::RoleName',\n  id: 'role-name',\n  disabled: data => data.record && data.record.isStatic,\n  validators: () => [Validators.required]\n}, {\n  type: \"boolean\"\n  /* Boolean */\n  ,\n  name: 'isDefault',\n  displayName: 'AbpIdentity::DisplayName:IsDefault',\n  id: 'role-is-default',\n  defaultValue: false\n}, {\n  type: \"boolean\"\n  /* Boolean */\n  ,\n  name: 'isPublic',\n  displayName: 'AbpIdentity::DisplayName:IsPublic',\n  id: 'role-is-public',\n  defaultValue: false\n}]);\nconst DEFAULT_ROLES_EDIT_FORM_PROPS = DEFAULT_ROLES_CREATE_FORM_PROPS;\nconst DEFAULT_ROLES_TOOLBAR_ACTIONS = ToolbarAction.createMany([{\n  text: 'AbpIdentity::NewRole',\n  action: data => {\n    const component = data.getInjected(RolesComponent);\n    component.add();\n  },\n  permission: 'AbpIdentity.Roles.Create',\n  icon: 'fa fa-plus'\n}]);\nconst DEFAULT_USERS_ENTITY_ACTIONS = EntityAction.createMany([{\n  text: 'AbpIdentity::Edit',\n  action: data => {\n    const component = data.getInjected(UsersComponent);\n    component.edit(data.record.id);\n  },\n  permission: 'AbpIdentity.Users.Update'\n}, {\n  text: 'AbpIdentity::Permissions',\n  action: data => {\n    const component = data.getInjected(UsersComponent);\n    component.openPermissionsModal(data.record.id, data.record.userName);\n  },\n  permission: 'AbpIdentity.Users.ManagePermissions'\n}, {\n  text: 'AbpIdentity::Delete',\n  action: data => {\n    const component = data.getInjected(UsersComponent);\n    component.delete(data.record.id, data.record.name || data.record.userName);\n  },\n  permission: 'AbpIdentity.Users.Delete'\n}]);\nconst DEFAULT_USERS_ENTITY_PROPS = EntityProp.createMany([{\n  type: \"string\"\n  /* String */\n  ,\n  name: 'userName',\n  displayName: 'AbpIdentity::UserName',\n  sortable: true,\n  columnWidth: 250,\n  valueResolver: data => {\n    const l10n = data.getInjected(LocalizationService);\n    const t = l10n.instant.bind(l10n);\n    const inactiveIcon = `<i title=\"${t('AbpIdentity::ThisUserIsNotActiveMessage')}\" class=\"fas fa-ban text-danger me-1\"></i>`;\n    return of(`\n        ${!data.record.isActive ? inactiveIcon : ''}\n        <span class=\"${!data.record.isActive ? 'text-muted' : ''}\">${escapeHtmlChars(data.record.userName)}</span>`);\n  }\n}, {\n  type: \"string\"\n  /* String */\n  ,\n  name: 'email',\n  displayName: 'AbpIdentity::EmailAddress',\n  sortable: true,\n  columnWidth: 250\n}, {\n  type: \"string\"\n  /* String */\n  ,\n  name: 'phoneNumber',\n  displayName: 'AbpIdentity::PhoneNumber',\n  sortable: true,\n  columnWidth: 250\n}]);\nconst DEFAULT_USERS_CREATE_FORM_PROPS = FormProp.createMany([{\n  type: \"string\"\n  /* String */\n  ,\n  name: 'userName',\n  displayName: 'AbpIdentity::UserName',\n  id: 'user-name',\n  validators: () => [Validators.required, Validators.maxLength(256)]\n}, {\n  type: \"password\"\n  /* Password */\n  ,\n  name: 'password',\n  displayName: 'AbpIdentity::Password',\n  id: 'password',\n  autocomplete: 'new-password',\n  validators: data => [Validators.required, ...getPasswordValidators({\n    get: data.getInjected\n  })]\n}, {\n  type: \"string\"\n  /* String */\n  ,\n  name: 'name',\n  displayName: 'AbpIdentity::DisplayName:Name',\n  id: 'name',\n  validators: () => [Validators.maxLength(64)]\n}, {\n  type: \"string\"\n  /* String */\n  ,\n  name: 'surname',\n  displayName: 'AbpIdentity::DisplayName:Surname',\n  id: 'surname',\n  validators: () => [Validators.maxLength(64)]\n}, {\n  type: \"email\"\n  /* Email */\n  ,\n  name: 'email',\n  displayName: 'AbpIdentity::EmailAddress',\n  id: 'email',\n  validators: () => [Validators.required, Validators.maxLength(256), Validators.email]\n}, {\n  type: \"string\"\n  /* String */\n  ,\n  name: 'phoneNumber',\n  displayName: 'AbpIdentity::PhoneNumber',\n  id: 'phone-number',\n  validators: () => [Validators.maxLength(16)]\n}, {\n  type: \"boolean\"\n  /* Boolean */\n  ,\n  name: 'isActive',\n  displayName: 'AbpIdentity::DisplayName:IsActive',\n  id: 'active-checkbox',\n  defaultValue: true\n}, {\n  type: \"boolean\"\n  /* Boolean */\n  ,\n  name: 'lockoutEnabled',\n  displayName: 'AbpIdentity::DisplayName:LockoutEnabled',\n  id: 'lockout-checkbox',\n  defaultValue: true\n}]);\nconst DEFAULT_USERS_EDIT_FORM_PROPS = DEFAULT_USERS_CREATE_FORM_PROPS.filter(prop => prop.name !== 'password');\nconst DEFAULT_USERS_TOOLBAR_ACTIONS = ToolbarAction.createMany([{\n  text: 'AbpIdentity::NewUser',\n  action: data => {\n    const component = data.getInjected(UsersComponent);\n    component.add();\n  },\n  permission: 'AbpIdentity.Users.Create',\n  icon: 'fa fa-plus'\n}]);\nconst DEFAULT_IDENTITY_ENTITY_ACTIONS = {\n  [\"Identity.RolesComponent\"\n  /* Roles */\n  ]: DEFAULT_ROLES_ENTITY_ACTIONS,\n  [\"Identity.UsersComponent\"\n  /* Users */\n  ]: DEFAULT_USERS_ENTITY_ACTIONS\n};\nconst DEFAULT_IDENTITY_TOOLBAR_ACTIONS = {\n  [\"Identity.RolesComponent\"\n  /* Roles */\n  ]: DEFAULT_ROLES_TOOLBAR_ACTIONS,\n  [\"Identity.UsersComponent\"\n  /* Users */\n  ]: DEFAULT_USERS_TOOLBAR_ACTIONS\n};\nconst DEFAULT_IDENTITY_ENTITY_PROPS = {\n  [\"Identity.RolesComponent\"\n  /* Roles */\n  ]: DEFAULT_ROLES_ENTITY_PROPS,\n  [\"Identity.UsersComponent\"\n  /* Users */\n  ]: DEFAULT_USERS_ENTITY_PROPS\n};\nconst DEFAULT_IDENTITY_CREATE_FORM_PROPS = {\n  [\"Identity.RolesComponent\"\n  /* Roles */\n  ]: DEFAULT_ROLES_CREATE_FORM_PROPS,\n  [\"Identity.UsersComponent\"\n  /* Users */\n  ]: DEFAULT_USERS_CREATE_FORM_PROPS\n};\nconst DEFAULT_IDENTITY_EDIT_FORM_PROPS = {\n  [\"Identity.RolesComponent\"\n  /* Roles */\n  ]: DEFAULT_ROLES_EDIT_FORM_PROPS,\n  [\"Identity.UsersComponent\"\n  /* Users */\n  ]: DEFAULT_USERS_EDIT_FORM_PROPS\n};\nconst IDENTITY_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_ACTION_CONTRIBUTORS');\nconst IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS');\nconst IDENTITY_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_PROP_CONTRIBUTORS');\nconst IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS');\nconst IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS');\nlet IdentityExtensionsGuard = /*#__PURE__*/(() => {\n  class IdentityExtensionsGuard {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    canActivate() {\n      const extensions = this.injector.get(ExtensionsService);\n      const actionContributors = this.injector.get(IDENTITY_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n      const toolbarContributors = this.injector.get(IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n      const propContributors = this.injector.get(IDENTITY_ENTITY_PROP_CONTRIBUTORS, null) || {};\n      const createFormContributors = this.injector.get(IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n      const editFormContributors = this.injector.get(IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n      const configState = this.injector.get(ConfigStateService);\n      return getObjectExtensionEntitiesFromStore(configState, 'Identity').pipe(map(entities => ({\n        [\"Identity.RolesComponent\"\n        /* Roles */\n        ]: entities.Role,\n        [\"Identity.UsersComponent\"\n        /* Users */\n        ]: entities.User\n      })), mapEntitiesToContributors(configState, 'AbpIdentity'), tap(objectExtensionContributors => {\n        mergeWithDefaultActions(extensions.entityActions, DEFAULT_IDENTITY_ENTITY_ACTIONS, actionContributors);\n        mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, toolbarContributors);\n        mergeWithDefaultProps(extensions.entityProps, DEFAULT_IDENTITY_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n        mergeWithDefaultProps(extensions.createFormProps, DEFAULT_IDENTITY_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n        mergeWithDefaultProps(extensions.editFormProps, DEFAULT_IDENTITY_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n      }), mapTo(true));\n    }\n\n  }\n\n  IdentityExtensionsGuard.ɵfac = function IdentityExtensionsGuard_Factory(t) {\n    return new (t || IdentityExtensionsGuard)(i0.ɵɵinject(i0.Injector));\n  };\n\n  IdentityExtensionsGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IdentityExtensionsGuard,\n    factory: IdentityExtensionsGuard.ɵfac\n  });\n  return IdentityExtensionsGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst routes = [{\n  path: '',\n  redirectTo: 'roles',\n  pathMatch: 'full'\n}, {\n  path: '',\n  component: RouterOutletComponent,\n  canActivate: [AuthGuard, PermissionGuard, IdentityExtensionsGuard],\n  children: [{\n    path: 'roles',\n    component: ReplaceableRouteContainerComponent,\n    data: {\n      requiredPolicy: 'AbpIdentity.Roles',\n      replaceableComponent: {\n        key: \"Identity.RolesComponent\"\n        /* Roles */\n        ,\n        defaultComponent: RolesComponent\n      }\n    }\n  }, {\n    path: 'users',\n    component: ReplaceableRouteContainerComponent,\n    data: {\n      requiredPolicy: 'AbpIdentity.Users',\n      replaceableComponent: {\n        key: \"Identity.UsersComponent\"\n        /* Users */\n        ,\n        defaultComponent: UsersComponent\n      }\n    }\n  }]\n}];\nlet IdentityRoutingModule = /*#__PURE__*/(() => {\n  class IdentityRoutingModule {}\n\n  IdentityRoutingModule.ɵfac = function IdentityRoutingModule_Factory(t) {\n    return new (t || IdentityRoutingModule)();\n  };\n\n  IdentityRoutingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: IdentityRoutingModule\n  });\n  IdentityRoutingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[RouterModule.forChild(routes)], RouterModule]\n  });\n  return IdentityRoutingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IdentityModule = /*#__PURE__*/(() => {\n  class IdentityModule {\n    static forChild(options = {}) {\n      return {\n        ngModule: IdentityModule,\n        providers: [{\n          provide: IDENTITY_ENTITY_ACTION_CONTRIBUTORS,\n          useValue: options.entityActionContributors\n        }, {\n          provide: IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS,\n          useValue: options.toolbarActionContributors\n        }, {\n          provide: IDENTITY_ENTITY_PROP_CONTRIBUTORS,\n          useValue: options.entityPropContributors\n        }, {\n          provide: IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS,\n          useValue: options.createFormPropContributors\n        }, {\n          provide: IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS,\n          useValue: options.editFormPropContributors\n        }, IdentityExtensionsGuard]\n      };\n    }\n\n    static forLazy(options = {}) {\n      return new LazyModuleFactory(IdentityModule.forChild(options));\n    }\n\n  }\n\n  IdentityModule.ɵfac = function IdentityModule_Factory(t) {\n    return new (t || IdentityModule)();\n  };\n\n  IdentityModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: IdentityModule\n  });\n  IdentityModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CoreModule, IdentityRoutingModule, NgbNavModule, ThemeSharedModule, UiExtensionsModule, NgbDropdownModule, PermissionManagementModule, NgxValidateCoreModule]]\n  });\n  return IdentityModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DEFAULT_IDENTITY_CREATE_FORM_PROPS, DEFAULT_IDENTITY_EDIT_FORM_PROPS, DEFAULT_IDENTITY_ENTITY_ACTIONS, DEFAULT_IDENTITY_ENTITY_PROPS, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, IDENTITY_ENTITY_ACTION_CONTRIBUTORS, IDENTITY_ENTITY_PROP_CONTRIBUTORS, IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, IdentityExtensionsGuard, IdentityModule, RolesComponent, UsersComponent }; //# sourceMappingURL=abp-ng.identity.mjs.map","map":null,"metadata":{},"sourceType":"module"}